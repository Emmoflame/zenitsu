 
 
// --- في أعلى ملف index.js --
const xoGames = {}
const bannedUsersPath = './banned-users.json'
let bannedUsers = []
import yts from 'yt-search'
// تحميل المحظورين عند بدء البوت
if (fs.existsSync(bannedUsersPath)) {
  bannedUsers = JSON.parse(fs.readFileSync(bannedUsersPath))
}

// حفظ التعديلات
const saveBannedUsers = () => {
  fs.writeFileSync(bannedUsersPath, JSON.stringify(bannedUsers, null, 2))
}

import { createRequire } from 'module';
const require = createRequire(import.meta.url);
import { downloadContentFromMessage } from '@whiskeysockets/baileys'
import { writeFile } from 'fs/promises'
import { downloadMediaMessage } from '@whiskeysockets/baileys'
const axios = require('axios'); // الآن يعمل بدون خطأ
import express from "express";

const app = express();

app.get("/", (req, res) => {
  res.send("✅ ZENITSU BOT is running!");
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`🌍 Web server running on port ${PORT}`);
});
import path from 'path'
import fs from 'fs'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const imagePath = path.join(__dirname, 'zenitsu.jpg')

import pkg from '@whiskeysockets/baileys'
import { Boom } from '@hapi/boom'
import { exec } from 'child_process'

const {
  default: makeWASocket,
  useMultiFileAuthState,
  DisconnectReason,
  fetchLatestBaileysVersion
} = pkg

let botEnabled = true
let isBotReady = false
const ownerId = '38989813805275@lid'
// في أعلى الملف بعد باقي التعريفات



const dataDir = path.join(__dirname, 'data');
const autoReactFile = path.join(dataDir, 'autoReact.json');

// إنشاء مجلد data تلقائيًا إن لم يكن موجودًا
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir);
}

// تحميل البيانات
let autoReactData = {};
if (fs.existsSync(autoReactFile)) {
  autoReactData = JSON.parse(fs.readFileSync(autoReactFile));
}

// حفظ التغييرات
function saveAutoReact() {
  fs.writeFileSync(autoReactFile, JSON.stringify(autoReactData, null, 2));
}
const eliteFile = './elite.json';

// تحميل بيانات النخبة من الملف أو إنشاء ملف جديد
let eliteUsers = [];
if (fs.existsSync(eliteFile)) {
  eliteUsers = JSON.parse(fs.readFileSync(eliteFile));
} else {
  fs.writeFileSync(eliteFile, JSON.stringify(eliteUsers, null, 2));
}

// حفظ التحديثات في ملف
function saveElite() {
  fs.writeFileSync(eliteFile, JSON.stringify(eliteUsers, null, 2));
}

// التحقق إذا المستخدم مطور أو نخبة
function isEliteOrOwner(userJid) {
  const owner = '38989813805275@lid'; // المطور الأساسي
  return userJid === owner || eliteUsers.includes(userJid);
}

// إضافة شخص للنخبة
async function addElite(userJid, sock, chatId) {
  if (!eliteUsers.includes(userJid)) {
    eliteUsers.push(userJid);
    saveElite();
    await sock.sendMessage(chatId, { text: `✅ تم إضافة الشخص إلى النخبة.` });
  } else {
    await sock.sendMessage(chatId, { text: `ℹ الشخص موجود بالفعل في النخبة.` });
  }
}

// إزالة شخص من النخبة
async function removeElite(userJid, sock, chatId) {
  if (eliteUsers.includes(userJid)) {
    eliteUsers = eliteUsers.filter(jid => jid !== userJid);
    saveElite();
    await sock.sendMessage(chatId, { text: `✅ تم إزالة الشخص من النخبة.` });
  } else {
    await sock.sendMessage(chatId, { text: `ℹ الشخص غير موجود في النخبة.` });
  }
}

// عرض قائمة النخبة
async function showElite(sock, chatId) {
  if (eliteUsers.length === 0) {
    await sock.sendMessage(chatId, { text: `⚠ لا يوجد أعضاء في النخبة حتى الآن.` });
  } else {
    const list = eliteUsers.map((jid, index) => `${index + 1}- @${jid.split('@')[0]}`).join('\n');
    await sock.sendMessage(chatId, {
      text: `📜 قائمة النخبة:\n\n${list}`,
      mentions: eliteUsers
    });
  }
}
// 🔡 كلمات فعالية الكتابة
const allWritingGames = [
  'ناروتو', 'ايتاتشي', 'ساسكي', 'ايرين', 'ليفاي',
  'تانجيرو', 'نيزوكو', 'غوكو', 'فيجيتا', 'لوفي',
  'زورو', 'شانكس', 'كونان', 'كاكاشي', 'هيسوكا',
  'كيلوا', 'غون', 'كورابيكا', 'سانجي', 'يوسوب',
  'ريوك', 'مادارا', 'زينيتسو', 'إينوسكي', 'هاشيراما',
  'جوحو', 'كاجومي', 'شينوبو', 'دابي', 'ميليوداس',
  'إيتادوري', 'سوكونا', 'ميغومي', 'نوبارا', 'غوجو',
  'ماكي', 'باندا', 'يويتا', 'توغِه', 'ناويا',
  'كين', 'سايتاما', 'جينوس', 'تاتشيبانا', 'بوكوينو',
  'أستا', 'يونو', 'يامي', 'نويتسل', 'ليشت',
  'أرين', 'بيك', 'زيك', 'هيستوريا', 'هانجي',
  'ميكاسا', 'أرمين', 'بيرتولت', 'راينر', 'يامير',
  'إيس', 'سابو', 'روبين', 'بروك', 'تشوبر',
  'باجي', 'مايكي', 'دراغن', 'تاكيميشي', 'ميتسوبا',
  'شيسوي', 'أوبايتو', 'ديدارا', 'كونان', 'كاكوزو',
  'هيدان', 'ناغاتو', 'إيتشيغو', 'أوراهارا', 'باكوغو',
  'تودوروكي', 'ديكو', 'أول مايت', 'هوكاجي', 'ناروكامي'
];
let writingGames = [...allWritingGames]
let activeWord = null
let winner = null
// قائمة الزخارف (بدون أسماء)
const styles = [
    (t) => t.split('').map(c => c + '̶').join(''),
    (t) => t.split('').map(c => c + '͜✿').join(''),
    (t) => `★彡${t}彡★`,
    (t) => `◈${t}◈`,
    (t) => `✧${t}✧`,
    (t) => `❖${t}❖`,
    (t) => `☬${t}☬`,
    (t) => `⚜️${t}⚜️`,
    (t) => `•${t}•`,
    (t) => `『${t}』`,
    (t) => `⟦${t}⟧`,
    (t) => `༺${t}༻`,
    (t) => `✪${t}✪`,
    (t) => `✵${t}✵`,
    (t) => `𓆩${t}𓆪`,
    (t) => `⸙${t}⸙`,
    (t) => `⌬${t}⌬`,
    (t) => `☾${t}☽`,
    (t) => `༒${t}༒`,
    (t) => `︵‿︵‿୨♡୧‿︵‿︵ ${t}`,
    (t) => `♛${t}♛`,
    (t) => `♡${t}♡`,
    (t) => `♞${t}♞`,
    (t) => `➳${t}➳`,
    (t) => `꧁${t}꧂`,
    (t) => `ღ${t}ღ`,
    (t) => `✿${t}✿`,
    (t) => `✦${t}✦`,
    (t) => `♚${t}♚`,
    (t) => `❥${t}❥`,
    (t) => `➵${t}➵`,
    (t) => `𖣘${t}𖣘`,
    (t) => `✺${t}✺`,
    (t) => `❂${t}❂`,
    (t) => `ꕥ${t}ꕥ`,
    (t) => `➺${t}➺`,
    (t) => `✄${t}✄`,
    (t) => `☠${t}☠`,
    (t) => `✰${t}✰`,
    (t) => `✘${t}✘`,
    (t) => `✞${t}✞`,
    (t) => `☬${t}☬`,
    (t) => `☾${t}☽`,
    (t) => `✧${t}✧`,
    (t) => `❖${t}❖`,
    (t) => `⧗${t}⧗`,
    (t) => `❂${t}❂`,
    (t) => `☄${t}☄`,
    (t) => `✷${t}✷`,
    (t) => `✣${t}✣`,
    (t) => `⛥${t}⛥`,
    (t) => `✙${t}✙`,
    (t) => `✦${t}✦`,
    (t) => `⊹${t}⊹`,
    (t) => `♧${t}♧`,
    (t) => `☮${t}☮`,
    (t) => `⟬${t}⟭`,
    (t) => `❦${t}❦`,
    (t) => `✽${t}✽`,
    (t) => `☘${t}☘`,
    (t) => `♨${t}♨`,
    (t) => `☯${t}☯`,
    (t) => `✤${t}✤`,
    (t) => `♩${t}♩`,
    (t) => `♪${t}♪`,
    (t) => `♫${t}♫`,
    (t) => `♬${t}♬`,
    (t) => `✢${t}✢`,
    (t) => `✣${t}✣`,
    (t) => `✥${t}✥`,
    (t) => `✦${t}✦`,
    (t) => `✧${t}✧`,
    (t) => `✩${t}✩`,
    (t) => `✪${t}✪`,
    (t) => `✫${t}✫`,
    (t) => `✬${t}✬`,
    (t) => `✭${t}✭`,
    (t) => `✮${t}✮`,
    (t) => `✯${t}✯`,
    (t) => `✰${t}✰`,
    (t) => `✱${t}✱`,
    (t) => `✲${t}✲`,
    (t) => `✳${t}✳`,
    (t) => `✴${t}✴`,
    (t) => `✵${t}✵`,
    (t) => `✶${t}✶`,
    (t) => `✷${t}✷`,
    (t) => `✸${t}✸`,
    (t) => `✹${t}✹`,
    (t) => `✺${t}✺`,
    (t) => `✻${t}✻`,
    (t) => `✼${t}✼`,
    (t) => `✽${t}✽`,
    (t) => `✾${t}✾`,
    (t) => `✿${t}✿`
];
// قائمة الحكم
const ahkam = [
    "العقل زينة.",
    "من جد وجد.",
    "الحكمة ضالة المؤمن.",
    "خير الكلام ما قل ودل.",
    "العاقل من اتعظ بغيره.",
    "الصبر مفتاح الفرج.",
    "العلم نور.",
    "من صبر ظفر.",
    "اعمل لدنياك كأنك تعيش أبداً واعمل لآخرتك كأنك تموت غداً.",
    "العفو عند المقدرة.",
    "من شب على شيء شاب عليه.",
    "احفظ لسانك.",
    "الحلم سيد الأخلاق.",
    "من سار على الدرب وصل.",
    "القناعة كنز لا يفنى.",
    "رحم الله امرأً عرف قدر نفسه.",
    "إذا تم العقل نقص الكلام.",
    "من طلب العلا سهر الليالي.",
    "الوقت كالسيف إن لم تقطعه قطعك.",
    "العجلة من الشيطان.",
    "ليس كل ما يلمع ذهباً.",
    "العين لا تعلو على الحاجب.",
    "كما تدين تدان.",
    "الجار قبل الدار.",
    "درهم وقاية خير من قنطار علاج.",
    "التجربة خير برهان.",
    "الحياة تجارب.",
    "الاعتدال خير الأمور.",
    "لا تؤجل عمل اليوم إلى الغد.",
    "الكتاب خير جليس.",
    "من أمن العقوبة أساء الأدب.",
    "سلامة الإنسان في حفظ اللسان.",
    "رب أخ لم تلده أمك.",
    "الصديق وقت الضيق.",
    "لكل مقام مقال.",
    "الحرية لا تقدر بثمن.",
    "الاعتراف بالحق فضيلة.",
    "من طلب المحال أتعب نفسه.",
    "من كثر كلامه كثر خطؤه.",
    "الأدب تاج على الرؤوس.",
    "من زرع حصد.",
    "الكلمة الطيبة صدقة.",
    "إذا غامرت في شرف مروم فلا تقنع بما دون النجوم.",
    "من جد في طلب العلم نال الشرف.",
    "العلم يرفع بيوتاً لا عماد لها.",
    "الأفعال أبلغ من الأقوال.",
    "الصدق منجاة.",
    "اتق الله حيثما كنت.",
    "اعرف قدر النعمة.",
    "لا حياة مع اليأس.",
    "المعرفة قوة.",
    "الجهل عدو الإنسان.",
    "الرحمة فوق العدل.",
    "العقل السليم في الجسم السليم.",
    "الفشل بداية النجاح.",
    "المؤمن مرآة أخيه.",
    "من حفر حفرة لأخيه وقع فيها.",
    "العزيمة تصنع المعجزات.",
    "من لم يشكر الناس لم يشكر الله.",
    "الطمع يقل ما جمع.",
    "العفو خير من الانتقام.",
    "من عاش بوجهين مات بلا وجه.",
    "الأيام دول.",
    "الباطل ساعة والحق إلى قيام الساعة.",
    "الحياء شعبة من الإيمان.",
    "من تواضع لله رفعه.",
    "المال خادم جيد وسيد فاسد.",
    "العاقل من يزن الأمور.",
    "إذا كان الكلام من فضة فالسكوت من ذهب.",
    "العمل عبادة.",
    "أحب لأخيك ما تحب لنفسك.",
    "البشاشة مفتاح القلوب.",
    "الصمت حكمة.",
    "التواضع رفعة.",
    "الحذر نصف الشجاعة.",
    "العطاء سر السعادة.",
    "من تأنى نال ما تمنى.",
    "السعادة قرار.",
    "المروءة في المعاملة.",
    "النجاح يحتاج إلى صبر."
];
const linkWatch = {};
// قائمة كلمات التحرش - ضعها في أعلى ملف البوت
const flirtLines = [
    "🫦 هل أنتِ قمر؟ لأنك تنيرين طريقي.",
    "🫦 هل أنتِ بحر؟ لأني أغرق في تأملكِ.",
    "🫦 هل أنتِ وردة؟ لأنكِ تملئين عالمي بعطركِ.",
    "🫦 هل أنتِ نجم؟ لأنك تضيئين سمائي.",
    "🫦 هل أنتِ الشمس؟ لأنكِ تمنحينني الدفء.",
    "🫦 هل أنتِ غيمة؟ لأنكِ تلطفين كل لحظة.",
    "🫦 هل أنتِ ملاك؟ لأنكِ تملئين حياتي بالنور.",
    "🫦 هل أنتِ قمر؟ لأنكِ تنيرين لي الظلمات.",
    "🫦 هل أنتِ فراشة؟ لأنكِ ترفرفين في كل مكان.",
    "🫦 هل أنتِ عصفورة؟ لأنكِ تجعلين حياتي مليئة بالألحان.",
    "🫦 هل أنتِ نجمة؟ لأنكِ تلمعين في سماء عمري.",
    "🫦 هل انتِ وردة؟ لأن انفاسكِ تذيبني.",
    "🫦 هل أنتِ زهرة؟ لأنكِ تفتحي في قلبي كل يوم.",
    "🫦 هل أنتِ أغنية؟ لأنكِ تغنين قلبي بكل لحظة.",
    "🫦 هل أنتِ عيون؟ لأنني لا أستطيع أن أراها سوى فيكِ.",
    "🫦 هل أنتِ شمس؟ لأنكِ تسطعين في كل يوم في حياتي.",
    "🫦 هل أنتِ نجمة؟ لأنكِ تلمعين في الليل البهيم.",
    "🫦 هل أنتِ لؤلؤة؟ لأنكِ تتألقين في البحر.",
    "🫦 هل أنتِ برق؟ لأنكِ تضيئين السماء.",
    "🫦 هل أنتِ قمر؟ لأنكِ تملئين حياتي سحرا.",
    "🫦 هل أنتِ حورية بحر؟ لأنني أرغب في الغرق فيكِ.",
    "🫦 هل أنتِ سراب؟ لأنني لا أستطيع أن أتمالك نفسي من التفكير فيكِ.",
    "🫦 هل أنتِ نهر؟ لأنني أريد أن أغرق في أعماقكِ.",
    "🫦 هل أنتِ فاكهة؟ لأنني لا أستطيع مقاومة لذاذتكِ.",
    "🫦 هل أنتِ قهوة؟ لأنني أحتاجكِ لتستفزيني.",
    "🫦 هل أنتِ سماء؟ لأنني أرغب في الطيران إليكِ.",
    "🫦 هل أنتِ عطري؟ لأنني أحتاجكِ لتنثريني في كل مكان.",
    "🫦 هل أنتِ زهرة؟ لأنني أريد أن أقطفكِ وأنتِ أجمل من الجميع.",
    "🫦 هل أنتِ شمس؟ لأنكِ تشرقين في قلبي ولا تغربين.",
    "🫦 هل أنتِ قلب؟ لأنكِ تجعلينني لا أستطيع التنفس دونكِ.",
    "🫦 هل أنتِ نار؟ لأنكِ تشعلينني بحبكِ.",
    "🫦 هل أنتِ عطر؟ لأنكِ تعطرين حياتي بكل لحظة.",
    "🫦 هل أنتِ سماء؟ لأنني أرغب في السقوط فيكِ.",
    "🫦 هل أنتِ غيمة؟ لأنني أرغب في أن أمطر عليكِ بحبي.",
    "🫦 هل أنتِ وردة؟ لأنكِ تزهرين في عيوني.",
    "🫦 هل أنتِ شجرة؟ لأنني أرغب في أن أتسلقكِ.",
    "🫦 هل أنتِ زهور؟ لأنني لا أستطيع أن أتمالك نفسي أمام جمالكِ.",
    "🫦 هل أنتِ فراشة؟ لأنني أرغب في أن أكون حولكِ دائمًا.",
    "🫦 هل أنتِ لؤلؤة؟ لأنكِ الثمين الذي أبحث عنه.",
    "🫦 هل أنتِ قمر؟ لأنكِ تضيئين حياتي وتملئينها بالجمال.",
    "🫦 هل أنتِ سكر؟ لأنكِ تجعلينني أذوب فيكِ.",
    "🫦 هل أنتِ شراب؟ لأنني أريد أن أرتوي منكِ.",
    "🫦 هل أنتِ مشهد؟ لأنكِ تجعلينني لا أستطيع أن أغمض عيني عنكِ.",
    "🫦 هل أنتِ نغم؟ لأنكِ تعزفين قلبي.",
    "🫦 هل أنتِ ثلج؟ لأنكِ تبردين مشاعري.",
    "🫦 هل أنتِ مطر؟ لأنني أغرق فيكِ.",
    "🫦 هل أنتِ نهار؟ لأنكِ تضيئين ليل حياتي.",
    "🫦 هل أنتِ سوسن؟ لأنكِ أجمل من كل الزهور.",
    "🫦 هل أنتِ كوكب؟ لأنكِ تدورين في عقلي.",
    "🫦 هل أنتِ كأس؟ لأنني أرغب في أن أحتسيكِ.",
    "🫦 هل أنتِ عاصفة؟ لأنكِ تهبّين في قلبي دون توقف.",
    "🫦 هل أنتِ سرير؟ لأنني أريد أن أغرق فيكِ.",
    "🫦 هل أنتِ أمل؟ لأنكِ تمنحينني سببًا للبقاء.",
    "🫦 هل أنتِ موسيقى؟ لأنكِ تجعلينني أرقص معكِ في كل لحظة.",
    "🫦 هل أنتِ غيمة؟ لأنكِ تملئين السماء.",
    "🫦 هل أنتِ زهراء؟ لأنكِ أضاءتِ لي الطريق.",
    "🫦 هل أنتِ ساحة؟ لأنني أرغب في أن ألعب معكِ.",
    "🫦 هل أنتِ قصة؟ لأنكِ تثيرين فضولي.",
    "🫦 هل أنتِ حلم؟ لأنني لا أريد أن أستيقظ منكِ.",
    "🫦 هل أنتِ كائن؟ لأنكِ تملئين حياتي."
];
const cupGames = {} // تخزين حالة اللعبة لكل مجموعة
const wheelGames = {}
    const emojis = [
  "😈", "😀", "🤪", "🥵", "🤠", "👻", "🤡", "🤖", "🙉", "💓", "💋", "🖐️", "🧠",
  "🔥", "🌟", "🍀", "🎯", "💎", "⚡", "🤑", "🥶", "😎", "😱", "🙈", "👽", "🦄",
  "🦖", "🐉", "🐵", "🐸", "🦊", "🐺", "🐼", "🐷", "🐮", "🐨", "🐰", "🐯", "🐔",
  "🐤", "🐧", "🐙", "🦑", "🦐", "🦞", "🐠", "🐬", "🦈", "🐳", "🐋", "🌈", "🍕"
]

const quizParticipants = {} // لكل جروب تخزين المشاركين
const quizData = {} // حالة كل مسابقة جارية
const eliminationAnimeQuestions = [
  {
    question: "من هو الهوكاجي الذي أسس نظام الجِتسو المحظور؟",
    options: ["الهوكاجي الثاني", "الهوكاجي الأول", "الهوكاجي الثالث"],
    correct: 1
  },
  {
    question: "ما اسم عين مادارا عندما دمج الرينغان مع الشارينغان؟",
    options: ["رينشارينغان", "شاريغان الأبدية", "عين العاصفة"],
    correct: 1
  },
  {
    question: "من الذي درّب إيتاتشي على تقنيات الإغتيال؟",
    options: ["داندو", "كاكاشي", "شيسوي"],
    correct: 1
  },
  {
    question: "في أنمي ون بيس، من هو أقوى سايبورغ؟",
    options: ["فرانكي", "بازيلي هوكينز", "كوما"],
    correct: 3
  },
  {
    question: "من هو مؤسس منظمة الصيادين في هنتر؟",
    options: ["نطيرو", "زينو", "بارستن"],
    correct: 1
  },
  {
    question: "ما نوع طاقة غون الرئيسية في نين؟",
    options: ["التحسين", "التلاعب", "الإطلاق"],
    correct: 1
  },
  {
    question: "ما اسم المدينة الأصلية لفولمتل ألشيميست؟",
    options: ["ريزنبل", "أميسريس", "ريسيمبول"],
    correct: 3
  },
  {
    question: "في أنمي بليتش، كم سيف يمتلك كيوسكي أوراهارا؟",
    options: ["1", "2", "لا يستخدم سيف"],
    correct: 1
  },
  {
    question: "من الذي قتل والدة إرين؟",
    options: ["العملاق الضبابي", "العملاق المدرع", "العملاق المبتسم"],
    correct: 3
  },
  {
    question: "من هو خصم جينتوما الرئيسي في غينتاما؟",
    options: ["تاكاسوغي", "ساكاموتو", "كاميناري"],
    correct: 1
  },
  {
    question: "من هو مستخدم التنفس القمري في قاتل الشياطين؟",
    options: ["كوكوني", "مووزان", "كوكوشيبو"],
    correct: 3
  },
  {
    question: "من هو الشينوبي الذي واجه مادارا لوحده لفترة طويلة؟",
    options: ["مايت غاي", "هاشيراما", "توبي"],
    correct: 1
  },
  {
    question: "من الذي طور تقنية الراسينغان الأصلية؟",
    options: ["ناروتو", "ميناتو", "جيرايا"],
    correct: 2
  },
  {
    question: "من هي أقوى شخصية أنثوية في بليتش؟",
    options: ["يونوئيتشي", "أونوهانا", "سوي فون"],
    correct: 2
  },
  {
    question: "في هنتر، من هزم بيتو؟",
    options: ["كيلوا", "غون", "كورابيكا"],
    correct: 2
  },
  {
    question: "كم عدد أقمار ناميك في دراغون بول؟",
    options: ["1", "3", "2"],
    correct: 3
  },
  {
    question: "من هو أول مستخدم لمينغيكيو شارينغان؟",
    options: ["إيتاتشي", "شيسوي", "مادارا"],
    correct: 3
  },
  {
    question: "ما اسم قائد فرقة النخبة في ون بيس؟",
    options: ["سانجي", "زورو", "كينيمون"],
    correct: 3
  },
  {
    question: "من الذي علم تانجيرو الرقص الناري؟",
    options: ["والده", "يو روكوداكي", "رينغوكو"],
    correct: 1
  },
  {
    question: "ما اسم العملاق الذي يمتلك قدرة صراخ مدمّر؟",
    options: ["المدرع", "الصرّاخ", "الأنثى"],
    correct: 2
  },
  {
    question: "ما نوع فاكهة الشيطان الخاصة بـ بلاك بيرد؟",
    options: ["الظلام", "الزلزال", "كلاهما"],
    correct: 3
  },
  {
    question: "من الذي هزم أكاينو؟",
    options: ["لوفي", "سابو", "لم يُهزم بعد"],
    correct: 3
  },
  {
    question: "كم عدد أرواح كاكوزو في ناروتو؟",
    options: ["4", "5", "6"],
    correct: 2
  },
  {
    question: "ما اسم الكيان الذي منح غون قدرته الأخيرة؟",
    options: ["نين الطبيعة", "تضحية النين", "عقد النين"],
    correct: 3
  },
  {
    question: "ما لون شعر توكا في نهاية طوكيو غول؟",
    options: ["أسود", "أبيض", "بنفسجي"],
    correct: 2
  },
  {
    question: "من أول من واجه لوفي في الجراند لاين؟",
    options: ["كروكودايل", "سموكر", "باغي"],
    correct: 2
  },
  {
    question: "كم عدد التقنيات في تنفس الماء في قاتل الشياطين؟",
    options: ["10", "11", "12"],
    correct: 2
  },
  {
    question: "من هو قائد الجي-5 في البحرية؟",
    options: ["فيرغو", "كوبي", "سيموكين"],
    correct: 1
  },
  {
    question: "من الذي أنقذ هيسوكا من الموت؟",
    options: ["كورورو", "باكو نودا", "خليط النين"],
    correct: 3
  },
  {
    question: "ما اسم السيف الأسود في بليتش؟",
    options: ["زانغيتسو", "أنكو", "تسوكا"],
    correct: 1
  },
  {
    question: "كم عملاق مختلف يمتلك إيرين؟",
    options: ["2", "3", "4"],
    correct: 2
  },
  {
    question: "من الذي اخترع فواكه الشيطان الصناعية؟",
    options: ["فيغابانك", "سيزار", "كايدو"],
    correct: 2
  },
  {
    question: "من هو أول مستخدم لتقنية كاماتسوري؟",
    options: ["مايت داي", "مايت غاي", "روك لي"],
    correct: 1
  },
  {
    question: "في أنمي ديث نوت، من هي الفتاة التي امتلكت مذكرة ثانية؟",
    options: ["ميو", "ميسا", "إيمي"],
    correct: 2
  },
  {
    question: "من هو الشخص الذي ورث نغمة إرادة دي؟",
    options: ["لوفي", "لو", "روجر"],
    correct: 3
  },
  {
    question: "من الذي هزم دانزو؟",
    options: ["ساسكي", "إيتاتشي", "ناروتو"],
    correct: 1
  },
  {
    question: "ما التقنية التي استخدمها جيرايا ضد باين؟",
    options: ["سجن الضفدع", "التحول الكبير", "تحكم الظل"],
    correct: 1
  },
  {
    question: "من هو أول عملاق تم صنعه بالتجارب؟",
    options: ["المدرع", "الوحش", "الضبابي"],
    correct: 3
  },
  {
    question: "ما اسم الفاكهة التي تناولها كيزارو؟",
    options: ["بيكا بيكا", "ميرا ميرا", "غورو غورو"],
    correct: 1
  },
  {
    question: "من الذي أنشأ جيوش الشياطين في قاتل الشياطين؟",
    options: ["موزان", "كوكوني", "دومي"],
    correct: 1
  },
  {
    question: "من الذي ورث الشارينغان في الجيل الجديد؟",
    options: ["بوروتو", "ميتسوكي", "سارادا"],
    correct: 3
  },
{
    question: "ما اسم الشينوبي الذي واجه إيتاتشي ومات بسبب نظرته؟",
    options: ["كاكاشي", "أوروتشيمارو", "ياماتو"],
    correct: 1
  },
  {
    question: "من هو الشخص الذي استخدم الرينغان أول مرة في الأنمي؟",
    options: ["مادارا", "هاغورومو", "ناغاتو"],
    correct: 2
  },
  {
    question: "كم عدد الأعضاء الناجين من عشيرة الأوتشيها بعد المذبحة؟",
    options: ["2", "3", "4"],
    correct: 1
  },
  {
    question: "من هو العملاق الذي كان مختبئًا داخل الجدران؟",
    options: ["الضبابي", "المطرقة", "العملاق الضخم"],
    correct: 2
  },
  {
    question: "ما اسم التقنية التي استخدمها لوفي لهزيمة كاتاكوري؟",
    options: ["سنيك مان", "بانش مان", "بلاك مان"],
    correct: 1
  },
  {
    question: "من الذي قطع ذراع زورو في مانغا غير رسمية؟",
    options: ["كوما", "ميهوك", "إينيل"],
    correct: 2
  },
  {
    question: "ما اسم التقنية المحرمة التي يستخدمها كورابيكا؟",
    options: ["السلسلة القاتلة", "العين المضيئة", "الغضب الإلهي"],
    correct: 1
  },
  {
    question: "من الذي قام بصناعة الكيورا في بليتش؟",
    options: ["إيزن", "مايوري", "جين"],
    correct: 1
  },
  {
    question: "ما اسم سيف كينباتشي الثاني بعد تطويره؟",
    options: ["نوزارا شي", "أنزو", "نوروزو"],
    correct: 1
  },
  {
    question: "من هو الشخص الذي نجى من ضربة مادارا المباشرة؟",
    options: ["غارا", "تسونادي", "مايت غاي"],
    correct: 3
  },
  {
    question: "كم عدد قادة الحروب الأربعة في ناروتو؟",
    options: ["4", "5", "6"],
    correct: 1
  },
  {
    question: "ما اسم الشخصية التي ورثت راينغان ناغاتو؟",
    options: ["كونان", "مادارا", "أوبيتو"],
    correct: 3
  },
  {
    question: "ما نوع تنفس غيومي في قاتل الشياطين؟",
    options: ["الصخر", "الضباب", "الصوت"],
    correct: 1
  },
  {
    question: "من هو مستخدم تقنية 'هاكينغ الصراخ' في ون بيس؟",
    options: ["ياسوب", "أوتا", "أبو"],
    correct: 3
  },
  {
    question: "من هو قائد ثوار دراغون الحقيقي؟",
    options: ["سابو", "إيفانكوف", "دراغون"],
    correct: 3
  },
  {
    question: "ما اسم العملاق الذي يمكنه الطيران؟",
    options: ["العربة", "الأنثى", "الطراد"],
    correct: 3
  },
  {
    question: "من هو أقوى قائد فرقة في بليتش؟",
    options: ["ياماموتو", "بيياكويا", "هيتسوغايا"],
    correct: 1
  },
  {
    question: "كم مرة مات غون في الأنمي؟",
    options: ["مرة", "لم يمت", "أُعلن موته سريريًا"],
    correct: 3
  },
  {
    question: "من هي أم بوروتو؟",
    options: ["ساكورا", "هيناتا", "تيماري"],
    correct: 2
  },
  {
    question: "ما اسم العصابة التي كانت تضم كورابيكا؟",
    options: ["العنكبوت", "اليد الحمراء", "السراب"],
    correct: 3
  },
  {
    question: "من هو أوّل من استخدم الغير الرابع في ون بيس؟",
    options: ["لوفي", "سابو", "رايلي"],
    correct: 1
  },
  {
    question: "ما اسم قائد القوات الخاصة في جيش الشياطين؟",
    options: ["مووزان", "دومي", "أكازا"],
    correct: 3
  },
  {
    question: "كم عدد حراس بوابة الجحيم في بليتش؟",
    options: ["1", "2", "3"],
    correct: 1
  },
  {
    question: "من الذي درّب كيلوا على القتل الصامت؟",
    options: ["والده", "جده", "أخوه إيلومي"],
    correct: 3
  },
  {
    question: "من هو الشينوبي الذي أوقف هجوم الكيوبي لحظات؟",
    options: ["ميناتو", "كاكاشي", "هاشيراما"],
    correct: 1
  },
  {
    question: "من الذي هزم العملاق المدرع لأول مرة؟",
    options: ["إيرين", "ليفاي", "هانجي"],
    correct: 1
  },
  {
    question: "من هو مستخدم فاكهة السحر في ون بيس؟",
    options: ["لاو", "هوكينز", "باجي"],
    correct: 2
  },
  {
    question: "كم عدد مستويات الراسينغان؟",
    options: ["3", "4", "5+"],
    correct: 3
  },
  {
    question: "ما اسم التقنية النهائية لمادارا؟",
    options: ["تسوكويومي اللانهائي", "عين القمر", "عالم المرايا"],
    correct: 1
  },
  {
    question: "من أول من اكتشف قوة العمالقة؟",
    options: ["هيلوس", "يومير", "زيك"],
    correct: 2
  },
  {
    question: "كم عدد تقنيات هيسوكا المعروفة؟",
    options: ["1", "2", "3+"],
    correct: 2
  },
  {
    question: "ما اسم النمط الذي استخدمه ناروتو وهيناتا معًا؟",
    options: ["تشاكرا العشيرة", "أسلوب التسارع", "لا يوجد نمط خاص"],
    correct: 3
  },
  {
    question: "من هو أول شخص استخدم ختم اللعنة؟",
    options: ["كيميمارو", "ساي", "أوروتشيمارو"],
    correct: 3
  },
  {
    question: "من هو خصم رينغوكو الذي قتله؟",
    options: ["أكازا", "مووزان", "إينوسوكي"],
    correct: 1
  },
  {
    question: "ما اسم أكبر سفينة في ون بيس؟",
    options: ["أوروس جاكسون", "ثاوزند ساني", "نوح"],
    correct: 3
  },
  {
    question: "من هو قائد فرقة الأسلحة البيولوجية في هجوم العمالقة؟",
    options: ["هانجي", "إيروين", "ليفاي"],
    correct: 1
  },
  {
    question: "كم عدد الإخوة في عشيرة كيميتسو نو يايبا؟",
    options: ["2", "3", "4"],
    correct: 1
  },
  {
    question: "من هو أول من تلقى ضربة قاتلة من ليفاي؟",
    options: ["زيك", "الوحش", "المدرع"],
    correct: 2
  },
  {
    question: "من أول من استخدم 'بوسو شوكو هاكي' في الأنمي؟",
    options: ["رايلي", "لوفي", "شانكس"],
    correct: 1
  },
  {
    question: "من الذي اكتشف طريقة ختم الكيوبي داخل جينشوريكي؟",
    options: ["ميناتو", "كوشينا", "توبي"],
    correct: 2
  },
  {
    question: "ما اسم الفتاة التي كانت تتجسس على هيسوكا؟",
    options: ["باكو نودا", "نيون", "ماشي"],
    correct: 3
  },
  {
    question: "من هو أول من استخدم نمط الألوان السبعة في القتال؟",
    options: ["إينوسوكي", "أوباناي", "تانجيرو"],
    correct: 3
  },
  {
    question: "من هو الحارس الشخصي لسيلفا في هنتر؟",
    options: ["كاناري", "غوتو", "زوينو"],
    correct: 2
  },
  {
    question: "من هو عضو الأكاتسوكي الذي يملك أكثر من قلب؟",
    options: ["هيدان", "كيسامي", "كاكوزو"],
    correct: 3
  }
] 
const eliminationFootballQuestions = [
  {
    question: "من هو أول لاعب فاز بجائزة الكرة الذهبية؟",
    options: ["ألفريدو دي ستيفانو", "ليونيل ميسي", "ستانلي ماثيوز"],
    correct: 3
  },
  {
    question: "من هو أكثر لاعب صنع أهدافًا في تاريخ دوري الأبطال؟",
    options: ["ميسي", "رونالدو", "دي ماريا"],
    correct: 1
  },
  {
    question: "أي منتخب لم يتأهل أبدًا لكأس العالم؟",
    options: ["الهند", "فنلندا", "كولومبيا"],
    correct: 2
  },
  {
    question: "في أي عام أقيم أول كأس عالم؟",
    options: ["1930", "1924", "1934"],
    correct: 1
  },
  {
    question: "ما هو أسرع هدف تم تسجيله في كأس العالم؟",
    options: ["6 ثوانٍ", "10 ثوانٍ", "11 ثانية"],
    correct: 1
  },
  {
    question: "من هو اللاعب الذي فاز بكأس العالم كلاعب ومدرب؟",
    options: ["زيدان", "بيكنباور", "رونالدو"],
    correct: 2
  },
  {
    question: "ما هو أول فريق فاز بدوري أبطال أوروبا؟",
    options: ["ريال مدريد", "ميلان", "برشلونة"],
    correct: 1
  },
  {
    question: "من هو أكثر لاعب لعب مباريات دولية؟",
    options: ["رونالدو", "أحمد حسن", "كريستيانو"],
    correct: 3
  },
  {
    question: "من هو أصغر لاعب شارك في كأس العالم؟",
    options: ["بيليه", "صاحب توري", "نورمان وايتسايد"],
    correct: 3
  },
  {
    question: "من هو أكثر لاعب طُرد في كأس العالم؟",
    options: ["زيدان", "رونالدينيو", "مارادونا"],
    correct: 1
  },
  {
    question: "أي نادي فاز بدوري أبطال أوروبا 3 مرات متتالية؟",
    options: ["ريال مدريد", "ميلان", "بايرن ميونخ"],
    correct: 1
  },
  {
    question: "من هو أكثر مدرب فاز بدوري الأبطال؟",
    options: ["أنشيلوتي", "غوارديولا", "مورينيو"],
    correct: 1
  },
  {
    question: "ما النادي الذي يمتلك أكثر بطولات دوري محلي؟",
    options: ["أهلي مصر", "ريال مدريد", "رangers"],
    correct: 3
  },
  {
    question: "من هو أسرع لاعب في تاريخ كرة القدم؟",
    options: ["غاريث بيل", "مبابي", "أداما تراوري"],
    correct: 1
  },
  {
    question: "كم عدد أهداف كلوزة في كأس العالم؟",
    options: ["15", "16", "14"],
    correct: 2
  },
  {
    question: "ما هو الفريق الذي لم يخسر أي مباراة في كأس العالم 2010؟",
    options: ["إسبانيا", "هولندا", "نيوزيلندا"],
    correct: 3
  },
  {
    question: "من هو أول حارس يسجل هدفًا في المونديال؟",
    options: ["هيغيتا", "شوماخر", "شو سونغ"],
    correct: 3
  },
  {
    question: "أي منتخب خسر النهائي 3 مرات؟",
    options: ["هولندا", "ألمانيا", "الأرجنتين"],
    correct: 1
  },
  {
    question: "من سجل أول هدف ذهبي في كأس العالم؟",
    options: ["بلان", "توتي", "برجكمب"],
    correct: 1
  },
  {
    question: "من هو اللاعب الذي أضاع أكثر ركلات جزاء؟",
    options: ["ميسي", "مارادونا", "توتي"],
    correct: 1
  },
  {
    question: "من هو أول منتخب أفريقي وصل إلى نصف نهائي كأس العالم؟",
    options: ["نيجيريا", "السنغال", "المغرب"],
    correct: 3
  },
  {
    question: "ما هي الدولة التي شاركت في جميع نسخ كأس العالم؟",
    options: ["ألمانيا", "البرازيل", "إيطاليا"],
    correct: 2
  },
  {
    question: "من هو اللاعب الذي سجل أكثر هاتريك في كأس العالم؟",
    options: ["جيرد مولر", "رونالدو نازاريو", "ساندور كوتشيس"],
    correct: 3
  },
  {
    question: "ما هو أول فريق عربي يفوز في كأس العالم؟",
    options: ["تونس", "الجزائر", "المغرب"],
    correct: 1
  },
  {
    question: "من سجل هدف اليد الشهير في كأس العالم؟",
    options: ["ميسي", "زيدان", "مارادونا"],
    correct: 3
  },
  {
    question: "من هو المدرب الذي فاز بكأس العالم مرتين؟",
    options: ["كارلوس ألبرتو", "فيتوريو بوتزو", "ديل بوسكي"],
    correct: 2
  },
  {
    question: "أي منتخب سجل أكبر عدد من الأهداف في بطولة واحدة؟",
    options: ["فرنسا", "البرازيل", "المجر"],
    correct: 3
  },
  {
    question: "ما هو المنتخب الذي لم يُهزم في نهائي كأس العالم؟",
    options: ["فرنسا", "إنجلترا", "إسبانيا"],
    correct: 3
  },
  {
    question: "من هو أكثر لاعب سجل أهدافًا في موسم واحد بدوري الأبطال؟",
    options: ["كريستيانو", "ليفاندوفسكي", "راؤول"],
    correct: 1
  },
  {
    question: "ما أول فريق يحقق ثلاثية الدوري والكأس والأبطال؟",
    options: ["مانشستر يونايتد", "برشلونة", "أياكس"],
    correct: 3
  },
  {
    question: "من سجل أول هدف في تاريخ كأس العالم؟",
    options: ["بيليه", "نيسلون", "لوسيان لوران"],
    correct: 3
  },
  {
    question: "ما هو أول منتخب آسيوي تأهل لكأس العالم؟",
    options: ["كوريا الجنوبية", "اليابان", "إندونيسيا"],
    correct: 3
  },
  {
    question: "من هو أكثر لاعب شارك في نهائيات كأس العالم؟",
    options: ["مارادونا", "ميسي", "لوثار ماتيوس"],
    correct: 3
  },
  {
    question: "أي لاعب فاز بكأس العالم 3 مرات؟",
    options: ["بيليه", "رونالدو", "بيكنباور"],
    correct: 1
  },
  {
    question: "من هو النادي الذي يُلقب بـ 'السيدة العجوز'؟",
    options: ["روما", "يوفنتوس", "إنتر ميلان"],
    correct: 2
  },
  {
    question: "من هو الحارس الأكثر نظافة شباك في كأس العالم؟",
    options: ["بوفون", "تيم هوارد", "فالديز"],
    correct: 1
  },
  {
    question: "من هو هداف كأس العالم 1998؟",
    options: ["بيير ليتبارسكي", "دافور سوكر", "رونالدو"],
    correct: 2
  },
  {
    question: "ما هو أول فريق يهزم البرازيل في نهائي كأس العالم؟",
    options: ["فرنسا", "أوروغواي", "إيطاليا"],
    correct: 2
  },
  {
    question: "من هو أسرع لاعب يسجل هاتريك في المونديال؟",
    options: ["جيرد مولر", "فوييلا", "لازلو كيس"],
    correct: 3
  },
  {
    question: "من أكثر منتخب لعب نهائي كأس العالم؟",
    options: ["ألمانيا", "البرازيل", "إيطاليا"],
    correct: 1
  },
  {
    question: "كم مرة خسر المنتخب الألماني النهائي؟",
    options: ["4", "3", "2"],
    correct: 1
  },
  {
    question: "أي منتخب سجل أعلى عدد أهداف في نهائي كأس العالم؟",
    options: ["فرنسا", "البرازيل", "إنجلترا"],
    correct: 1
  },
  {
    question: "ما هو أسرع هدف في نهائي دوري الأبطال؟",
    options: ["رونالدو", "مالديني", "بنزيما"],
    correct: 2
  },
  {
    question: "ما هو النادي الأكثر تتويجًا بالدوري الإنجليزي؟",
    options: ["مانشستر يونايتد", "ليفربول", "أرسنال"],
    correct: 1
  },
  {
    question: "من هو أغلى لاعب في التاريخ حتى الآن؟",
    options: ["مبابي", "نيمار", "جود بيلينغهام"],
    correct: 2
  },
  {
    question: "من هو أكثر مدرب قاد مباريات في كأس العالم؟",
    options: ["بورا ميلوتينوفيتش", "هيلموث شون", "لوف"],
    correct: 2
  },
  {
    question: "ما هو الفريق الذي لم يخسر أبدًا في كأس العالم وخرج؟",
    options: ["إيطاليا", "بلجيكا", "سويسرا"],
    correct: 3
  },
  {
    question: "ما هو أقل عدد أهداف في بطولة كأس عالم؟",
    options: ["70", "88", "113"],
    correct: 1
  },
  {
    question: "من هو اللاعب الوحيد الذي سجل في أربع نسخ كأس عالم؟",
    options: ["بيليه", "كريستيانو", "ميروسلاف كلوزه"],
    correct: 2
  },
  {
    question: "من هو المنتخب الذي خسر في النهائي بالركلات مرتين؟",
    options: ["الأرجنتين", "هولندا", "فرنسا"],
    correct: 2
  },
  {
    question: "كم مرة تأهل منتخب الجزائر لكأس العالم؟",
    options: ["3", "4", "5"],
    correct: 3
  },
  {
    question: "من أول دولة عربية استضافت كأس العالم للأندية؟",
    options: ["مصر", "قطر", "الإمارات"],
    correct: 3
  },
  {
    question: "من هو أول لاعب يسجل 5 أهداف في مباراة واحدة في كأس العالم؟",
    options: ["كرويف", "سالم الحاج", "أولي هونيس"],
    correct: 3
  },
  {
    question: "من سجل أسرع سوبر هاتريك في دوري الأبطال؟",
    options: ["ليفاندوفسكي", "هالاند", "بنزيما"],
    correct: 1
  },
  {
    question: "من هو أول لاعب إنجليزي فاز بالكرة الذهبية؟",
    options: ["بوبي تشارلتون", "كيفن كيجان", "ستانلي ماثيوز"],
    correct: 3
  },
  {
    question: "أي منتخب سجل أكثر أهداف في نسخة واحدة؟",
    options: ["البرازيل", "المجر", "فرنسا"],
    correct: 2
  },
  {
    question: "من هو أكثر لاعب أضاع ركلات جزاء في التاريخ؟",
    options: ["ميسي", "توتي", "سيموني زازا"],
    correct: 1
  },
  {
    question: "كم مرة أُقيمت بطولة أمم أوروبا؟",
    options: ["16", "15", "17"],
    correct: 2
  },
  {
    question: "من هو الفريق الوحيد الذي فاز بكأس العالم على أرضه وخارجها؟",
    options: ["إيطاليا", "فرنسا", "البرازيل"],
    correct: 3
  },
  {
    question: "من سجل هدف الفوز في نهائي 2014؟",
    options: ["غوتزه", "أوزيل", "مولر"],
    correct: 1
  },
  {
    question: "أي نادي لديه أكثر بطولات دوري محلي في العالم؟",
    options: ["ريال مدريد", "سلتيك", "رينجرز"],
    correct: 3
  }
]
const eliminationGeneralQuestions = [
  {
    question: "ما هو أكبر كوكب في النظام الشمسي؟",
    options: ["الأرض", "زحل", "المشتري"],
    correct: 3
  },
  {
    question: "كم عدد قارات العالم؟",
    options: ["6", "7", "5"],
    correct: 2
  },
  {
    question: "من هو مخترع المصباح الكهربائي؟",
    options: ["أديسون", "نيوتن", "غاليليو"],
    correct: 1
  },
  {
    question: "ما هي عاصمة اليابان؟",
    options: ["أوساكا", "كيوتو", "طوكيو"],
    correct: 3
  },
  {
    question: "كم عدد أضلاع المثلث؟",
    options: ["3", "4", "5"],
    correct: 1
  },
  {
    question: "ما هو أقرب كوكب إلى الشمس؟",
    options: ["الزهرة", "عطارد", "الأرض"],
    correct: 2
  },
  {
    question: "من هو مؤلف رواية 'البؤساء'؟",
    options: ["ديكنز", "فيكتور هوغو", "تولستوي"],
    correct: 2
  },
  {
    question: "كم لترًا يحتوي عليه الدم في جسم الإنسان؟",
    options: ["4-6 لتر", "7-9 لتر", "10-12 لتر"],
    correct: 1
  },
  {
    question: "ما هي اللغة الرسمية للبرازيل؟",
    options: ["الإسبانية", "الفرنسية", "البرتغالية"],
    correct: 3
  },
  {
    question: "في أي قارة تقع مصر؟",
    options: ["آسيا", "أفريقيا", "أوروبا"],
    correct: 2
  },
  {
    question: "ما هي عاصمة كندا؟",
    options: ["تورونتو", "أوتاوا", "مونتريال"],
    correct: 2
  },
  {
    question: "ما هي المادة التي تُستخدم في الكتابة على السبورة؟",
    options: ["الطباشير", "الرصاص", "الحبر"],
    correct: 1
  },
  {
    question: "كم عدد أيام السنة الكبيسة؟",
    options: ["365", "366", "364"],
    correct: 2
  },
  {
    question: "ما هو الحيوان الذي يُلقب بسفينة الصحراء؟",
    options: ["الحصان", "الجمل", "الماعز"],
    correct: 2
  },
  {
    question: "ما اسم الجهاز الذي يُستخدم لقياس درجة الحرارة؟",
    options: ["باروميتر", "ثيرموميتر", "ميكروميتر"],
    correct: 2
  },
  {
    question: "ما اسم أطول نهر في العالم؟",
    options: ["الأمازون", "الدانوب", "النيل"],
    correct: 3
  },
  {
    question: "من هو مؤسس شركة مايكروسوفت؟",
    options: ["ستيف جوبز", "بيل غيتس", "إيلون ماسك"],
    correct: 2
  },
  {
    question: "أي حيوان يُصدر صوت النقيق؟",
    options: ["الضفدع", "البطة", "الثعلب"],
    correct: 1
  },
  {
    question: "كم عدد الساعات في اليوم؟",
    options: ["12", "24", "48"],
    correct: 2
  },
  {
    question: "ما هو العنصر الكيميائي الذي رمزه O؟",
    options: ["الهيدروجين", "الأكسجين", "النيتروجين"],
    correct: 2
  }, 
  {
    question: "ما هو الحيوان الذي لا يصدر صوتًا؟",
    options: ["الثعبان", "السلحفاة", "الزرافة"],
    correct: 3
  },
  {
    question: "ما هو الغاز الذي يحتاجه الإنسان للتنفس؟",
    options: ["ثاني أكسيد الكربون", "الأكسجين", "الهيدروجين"],
    correct: 2
  },
  {
    question: "كم عدد الكواكب في المجموعة الشمسية؟",
    options: ["7", "8", "9"],
    correct: 2
  },
  {
    question: "ما اسم الجهاز المسؤول عن ضخ الدم في جسم الإنسان؟",
    options: ["الرئتين", "الكلى", "القلب"],
    correct: 3
  },
  {
    question: "في أي قارة تقع الأرجنتين؟",
    options: ["أمريكا الشمالية", "أمريكا الجنوبية", "أوروبا"],
    correct: 2
  },
  {
    question: "من هو العالم الذي وضع قانون الجاذبية؟",
    options: ["غاليلو", "نيوتن", "أديسون"],
    correct: 2
  },
  {
    question: "ما هو الحيوان الذي يستطيع تغيير لونه؟",
    options: ["الضفدع", "الحرباء", "الثعبان"],
    correct: 2
  },
  {
    question: "ما هي أصغر قارة في العالم؟",
    options: ["أستراليا", "أوروبا", "أنتاركتيكا"],
    correct: 1
  },
  {
    question: "ما اسم أول رئيس للولايات المتحدة؟",
    options: ["لينكولن", "جورج واشنطن", "جون آدامز"],
    correct: 2
  },
  {
    question: "ما اسم المعدن الذي يُستخدم في صناعة الأسلاك الكهربائية؟",
    options: ["الحديد", "الألمنيوم", "النحاس"],
    correct: 3
  },
  {
    question: "من هو أول إنسان صعد إلى القمر؟",
    options: ["يوري غاغارين", "نيل آرمسترونغ", "بز ألدرن"],
    correct: 2
  },
  {
    question: "ما اسم الدولة التي تُعرف بأرض الشمس المشرقة؟",
    options: ["الصين", "كوريا", "اليابان"],
    correct: 3
  },
  {
    question: "ما هو اسم أطول سلسلة جبال في العالم؟",
    options: ["جبال الألب", "الهيمالايا", "جبال الأنديز"],
    correct: 3
  },
  {
    question: "ما اسم الكوكب الأحمر؟",
    options: ["المريخ", "زحل", "الزهرة"],
    correct: 1
  },
  {
    question: "من هو مكتشف أمريكا؟",
    options: ["فاسكو دي غاما", "كريستوفر كولومبوس", "ماجلان"],
    correct: 2
  },
  {
    question: "ما اسم العلم الذي يدرس الطقس؟",
    options: ["الجيولوجيا", "البيولوجيا", "الأرصاد الجوية"],
    correct: 3
  },
  {
    question: "ما اسم أسرع حيوان بري؟",
    options: ["الفهد", "الأسد", "النمر"],
    correct: 1
  },
  {
    question: "كم عدد الأسنان لدى الإنسان البالغ؟",
    options: ["28", "32", "30"],
    correct: 2
  },
  {
    question: "ما هي العاصمة الإدارية لأستراليا؟",
    options: ["سيدني", "كانبيرا", "ملبورن"],
    correct: 2
  },
  {
    question: "ما هو البحر الذي لا تطل عليه أي قارة؟",
    options: ["البحر الكاريبي", "البحر الميت", "بحر سارجاسو"],
    correct: 3
  },
  {
    question: "ما اسم الغدة التي تنظم مستوى السكر؟",
    options: ["الكبد", "البنكرياس", "الكلى"],
    correct: 2
  },
  {
    question: "ما هو العضو الذي ينقي الدم؟",
    options: ["القلب", "الكلى", "الكبد"],
    correct: 2
  },
  {
    question: "من هو مؤسس نظرية النسبية؟",
    options: ["هابل", "أينشتاين", "كوبرنيكوس"],
    correct: 2
  },
  {
    question: "ما هو الكائن الوحيد الذي لا ينام؟",
    options: ["قنديل البحر", "النحلة", "الصرصور"],
    correct: 1
  },
  {
    question: "من هو أول إنسان في التاريخ؟",
    options: ["آدم", "إبراهيم", "نوح"],
    correct: 1
  },
  {
    question: "ما اسم الغلاف الذي يحيط بالأرض؟",
    options: ["الغلاف المائي", "الغلاف الجوي", "الغلاف الحيوي"],
    correct: 2
  },
  {
    question: "كم عدد العضلات في جسم الإنسان؟",
    options: ["206", "639", "421"],
    correct: 2
  },
  {
    question: "ما هو الطائر الذي لا يطير؟",
    options: ["البطريق", "الصقر", "الطاووس"],
    correct: 1
  },
  {
    question: "من هو أول من اخترع الهاتف؟",
    options: ["أديسون", "غراهام بيل", "نيوتن"],
    correct: 2
  },
  {
    question: "ما اسم القارة التي تضم أكبر عدد من الدول؟",
    options: ["أفريقيا", "آسيا", "أوروبا"],
    correct: 1
  },
  {
    question: "ما اسم العَظمَة الأطول في جسم الإنسان؟",
    options: ["عظمة الفخذ", "عظمة العضد", "عظمة الترقوة"],
    correct: 1
  },
  {
    question: "ما هي وحدة قياس القوة؟",
    options: ["نيوتن", "واط", "أوم"],
    correct: 1
  },
  {
    question: "ما اسم العملة الرسمية في اليابان؟",
    options: ["الين", "اليوان", "الدولار"],
    correct: 1
  },
  {
    question: "ما اسم أقرب نجم إلى الأرض؟",
    options: ["القمر", "الشمس", "المشتري"],
    correct: 2
  },
  {
    question: "ما هي عاصمة الصين؟",
    options: ["شنغهاي", "هونغ كونغ", "بكين"],
    correct: 3
  },
  {
    question: "كم عدد الصمامات في قلب الإنسان؟",
    options: ["4", "3", "5"],
    correct: 1
  },
  {
    question: "من هو أول مسلم صعد إلى الفضاء؟",
    options: ["محمد فارس", "رائد الفضاء الإماراتي", "الشيخ عبدالعزيز"],
    correct: 1
  },
  {
    question: "ما هو الحيوان الأطول على الأرض؟",
    options: ["الزرافة", "الفيل", "الديناصور"],
    correct: 1
  },
  {
    question: "من هو مؤلف كتاب 'الجمهورية'؟",
    options: ["سقراط", "أفلاطون", "أرسطو"],
    correct: 2
  },
  {
    question: "ما هو أعلى جبل في العالم؟",
    options: ["كيليمنجارو", "إيفرست", "الهيمالايا"],
    correct: 2
  },
  {
    question: "من هو صاحب لوحة الموناليزا؟",
    options: ["بيكاسو", "دافنشي", "فان غوخ"],
    correct: 2
  }
]
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

async function startEliminationGame(sock, chatId) {
  quizData[chatId].status = 'playing';
  let participants = [...quizParticipants[chatId]];
  let currentQuestion = 0;

  // دمج الأسئلة من جميع الفئات
  let allQuestions = [
    ...eliminationAnimeQuestions,
    ...eliminationFootballQuestions,
    ...eliminationGeneralQuestions
  ];

  // ترتيب عشوائي 100٪ باستخدام shuffleArray
  allQuestions = shuffleArray(allQuestions);

  while (participants.length > 1 && currentQuestion < allQuestions.length) {
    const q = allQuestions[currentQuestion];
    const answers = {};
    const answeredUsers = [];

    await sock.sendMessage(chatId, {
      text: `❓ *${q.question}*\n\n1️⃣ ${q.options[0]}\n2️⃣ ${q.options[1]}\n3️⃣ ${q.options[2]}\n\n⌛ لديك 90 ثانية للإجابة.\n✍️ أرسل رقم الخيار الصحيح.`,
      mentions: participants
    });

    const waitForAnswers = new Promise(resolve => {
      const handler = async ({ messages }) => {
        const msg = messages[0];
        if (!msg || !msg.message || msg.key.remoteJid !== chatId) return;

        const sender = msg.key.participant || msg.key.remoteJid;
        const textMsg = msg.message.conversation || msg.message.extendedTextMessage?.text || '';

        if (!participants.includes(sender)) return;
        if (answeredUsers.includes(sender)) return;
        if (!["1", "2", "3"].includes(textMsg.trim())) return;

        answeredUsers.push(sender);
        answers[sender] = parseInt(textMsg.trim());

        await sock.sendMessage(chatId, {
          text: `✅ تم استلام إجابة من @${sender.split('@')[0]}\n📥 (${answeredUsers.length}/${participants.length})`,
          mentions: [sender]
        });

        if (answeredUsers.length === participants.length) {
          sock.ev.off('messages.upsert', handler);
          resolve();
        }
      };

      sock.ev.on('messages.upsert', handler);

      // حد زمني 90 ثانية
      setTimeout(() => {
        sock.ev.off('messages.upsert', handler);
        resolve();
      }, 90 * 1000);
    });

    await waitForAnswers;

    // تحديد من تم إقصاؤه
    const survivors = [];
    for (const user of participants) {
      if (!answers[user]) {
        await sock.sendMessage(chatId, {
          text: `❌ @${user.split('@')[0]} لم يجب وتم إقصاؤه تلقائيًا!`,
          mentions: [user]
        });
        continue;
      }

      if (answers[user] === q.correct) {
        survivors.push(user);
      } else {
        await sock.sendMessage(chatId, {
          text: `❌ @${user.split('@')[0]} أجاب خطأ وتم إقصاؤه!`,
          mentions: [user]
        });
      }
    }

    if (survivors.length === 0) {
      await sock.sendMessage(chatId, { text: "😢 تم إقصاء الجميع! لا يوجد فائز." });
      delete quizData[chatId];
      delete quizParticipants[chatId];
      return;
    }

    participants = survivors;
    currentQuestion++;
  }

  // إعلان الفائز
  if (participants.length === 1) {
    const winner = participants[0];
    const bank = getUserBank(winner);
    bank.balance += 150000;
    saveBank();

    await sock.sendMessage(chatId, {
      text: `
╭━━━┫ 🎉 تهانينا ┣━━━╮

🏆 الفائز: @${winner.split('@')[0]}
🖼️ أنهيت المسابقة بنجاح!
💰 تمت إضافة 150k إلى رصيدك البنكي

✨ استمر في التفاعل مع الفعاليات لتكسب أكثر!
╰━━━━━━━━━━━━━━━━━━━━╯

اكتب: .بنك 📎 لعرض رصيدك
`,
      mentions: [winner]
    });
  } else {
    await sock.sendMessage(chatId, { text: "❗ انتهت الأسئلة بدون فائز نهائي." });
  }

  delete quizData[chatId];
  delete quizParticipants[chatId];
}
// قاعدة بيانات الصور والإجابات
const images = {
  'Valverde.jpg': 'فالفيردي',
  'ania.jpg': 'انيا',
  'asta.jpg': 'استا',
  'batman.jpg': 'باتمان',
  'bellingham.jpg': 'بيلينجهام',
  'dofi.jpg': 'دوفلامينجو',
  'doraimon.jpg': 'دورايمون',
  'goku.jpg': 'غوكو',
  'gon.jpg': 'غون',
  'iscanor.jpg': 'اسكانور',
  'itachi.jpg': 'ايتاشي',
  'julios.jpg': 'يوليوس',
  'killua.jpg': 'كيلوا',
  'lamin.jpg': 'لامين',
  'lufi.jpg': 'لوفي',
  'mbappe.jpg': 'مبابي',
  'messi.jpg': 'ميسي',
  'mickey.jpg': 'مايكي',
  'nagi.jpg': 'ناغي',
  'neymar.jpg': 'نيمار',
  'obito.jpg': 'اوبيتو',
  'pedri.jpg': 'بيدري',
  'ran.jpg': 'ران',
  'rengoku.jpg': 'رينغوكو',
  'shizuka.jpg': 'شيزوكا',
  'shober.jpg': 'تشوبر',
  'sung.jpg': 'سونغ',
  'toga.jpg': 'توغا',
  'tomioka.jpg': 'توميوكا',
  'vegita.jpg': 'فيجيتا',
  'yami.jpg': 'يامي',
  'yohan.jpg': 'يوهان',
  'zenitsu.jpg': 'زينيتسو'
};

// متغيرات عامة لتخزين الصورة والإجابة الحالية
let currentImage = null;
let currentAnswer = null;

// 🧩 كلمات فعالية التفكيك
const allSplitGames = [
  'غوكو', 'لوفي', 'ناروتو', 'زورو', 'ساسكي',
  'تانجيرو', 'نيزوكو', 'فيجيتا', 'إينوسكي', 'مادارا',
  'كاكاشي', 'ايرين', 'ليفاي', 'شانكس', 'غون',
  'كيلوا', 'كورابيكا', 'ريوك', 'هاشيراما', 'جوحو',
  'شينوبو', 'دابي', 'ميليوداس', 'إيتاتشي', 'كاجومي',
  'هيسوكا', 'سانجي', 'يوسوب', 'كونان', 'سينكو',
  'سوكونا', 'ميغومي', 'نوبارا', 'غوجو', 'ماكي',
  'باندا', 'يويتا', 'توغه', 'كين', 'سايتاما',
  'جينوس', 'يامي', 'يونو', 'أستا', 'ليشت',
  'هيستوريا', 'هانجي', 'ميكاسا', 'أرمين', 'زيك',
  'راينر', 'إيس', 'سابو', 'روبين', 'تشوبر',
  'بروك', 'مايكي', 'دراغن', 'تاكيميشي', 'باجي',
  'ميتسوبا', 'شيسوي', 'أوبايتو', 'ديدارا', 'كاكوزو',
  'هيدان', 'ناغاتو', 'إيتشيغو', 'باكوغو', 'ديكو',
  'تودوروكي', 'أولمايت', 'هوكاجي', 'ناروكامي', 'مينا',
  'ميريو', 'نيجي', 'تيماري', 'ساكورا', 'إينو',
  'تينتين', 'أنكو', 'كونوهامارو', 'روكلي', 'غاارا'
];
let splitGames = [...allSplitGames]
let activeSplit = null
let splitWinner = null

// 🔁 كلمات فعالية العكس
const allReverseGames = [
  'ناروتو', 'غوكو', 'لوفي', 'ساسكي', 'فيجيتا',
  'تانجيرو', 'نيزوكو', 'ليفاي', 'ايرين', 'كاكاشي',
  'إينوسكي', 'مادارا', 'غون', 'كيلوا', 'كورابيكا',
  'ريوك', 'جوحو', 'ميليوداس', 'إيتاتشي', 'شانكس',
  'سانجي', 'يوسوب', 'هيسوكا', 'كونان', 'شينوبو',
  'كاجومي', 'دابي', 'سينكو', 'ميكو', 'ايتسوكي',
  'سوكونا', 'ميغومي', 'نوبارا', 'غوجو', 'ماكي',
  'باندا', 'يويتا', 'توغه', 'سايتاما', 'جينوس',
  'يامي', 'أستا', 'يونو', 'ليشت', 'هيستوريا',
  'هانجي', 'ميكاسا', 'أرمين', 'زيك', 'راينر',
  'إيس', 'سابو', 'روبين', 'تشوبر', 'بروك',
  'مايكي', 'دراغن', 'تاكيميشي', 'باجي', 'ميتسوبا',
  'شيسوي', 'أوبايتو', 'ديدارا', 'كاكوزو', 'هيدان',
  'ناغاتو', 'إيتشيغو', 'باكوغو', 'ديكو', 'تودوروكي',
  'أولمايت', 'ناروكامي', 'ميريو', 'نيجي', 'ساكورا',
  'إينو', 'تينتين', 'أنكو', 'روكلي', 'غاارا'
];
let reverseGames = [...allReverseGames]
let activeReverse = null
let reverseWinner = null

const footballQuestions = {
  1: {
    question: 'من هو الهداف التاريخي لمنتخب البرتغال؟',
    options: ['كريستيانو رونالدو', 'ناني', 'أوزيبيو'],
    answer: 'كريستيانو رونالدو'
  },
  2: {
    question: 'من فاز بكأس العالم 2014؟',
    options: ['البرازيل', 'ألمانيا', 'الأرجنتين'],
    answer: 'ألمانيا'
  },
  3: {
    question: 'كم عدد بطولات دوري أبطال أوروبا لريال مدريد؟',
    options: ['10', '14', '12'],
    answer: '14'
  },
  4: {
    question: 'من هو أكثر لاعب سجل أهدافًا في التاريخ؟',
    options: ['بيليه', 'رونالدو', 'كريستيانو رونالدو'],
    answer: 'كريستيانو رونالدو'
  },
  5: {
    question: 'من هو نادي محمد صلاح الحالي؟',
    options: ['تشيلسي', 'ليفربول', 'روما'],
    answer: 'ليفربول'
  },
  6: {
    question: 'كم مرة فازت فرنسا بكأس العالم؟',
    options: ['مرة', 'مرتين', '3 مرات'],
    answer: 'مرتين'
  },
  7: {
    question: 'من هو حارس مرمى منتخب مصر الأساسي في 2018؟',
    options: ['الشناوي', 'عصام الحضري', 'أبو جبل'],
    answer: 'عصام الحضري'
  },
  8: {
    question: 'من هو هداف كأس العالم 2022؟',
    options: ['ميسي', 'مبابي', 'هالاند'],
    answer: 'مبابي'
  },
  9: {
    question: 'أين أقيمت كأس العالم 2010؟',
    options: ['جنوب أفريقيا', 'ألمانيا', 'البرازيل'],
    answer: 'جنوب أفريقيا'
  },
  10: {
    question: 'من فاز بكأس أمم أوروبا 2016؟',
    options: ['إسبانيا', 'فرنسا', 'البرتغال'],
    answer: 'البرتغال'
  },
  11: {
    question: 'من هو مدرب مانشستر سيتي الحالي؟',
    options: ['بيب غوارديولا', 'كلوب', 'أنشيلوتي'],
    answer: 'بيب غوارديولا'
  },
  12: {
    question: 'من هو أسرع لاعب في فيفا 23؟',
    options: ['فينيسيوس', 'مبابي', 'هالاند'],
    answer: 'مبابي'
  },
  13: {
    question: 'كم عدد اللاعبين في فريق كرة القدم؟',
    options: ['10', '11', '12'],
    answer: '11'
  },
  14: {
    question: 'أين يلعب كريستيانو رونالدو حاليًا؟',
    options: ['النصر السعودي', 'ريال مدريد', 'مانشستر يونايتد'],
    answer: 'النصر السعودي'
  },
  15: {
    question: 'من هو اللاعب العربي الذي فاز بدوري الأبطال مع ليفربول؟',
    options: ['رياض محرز', 'محمد صلاح', 'بن عطية'],
    answer: 'محمد صلاح'
  },
  16: {
    question: 'ما هي الدولة التي فازت بكأس العالم أكثر عدد مرات؟',
    options: ['إيطاليا', 'البرازيل', 'ألمانيا'],
    answer: 'البرازيل'
  },
  17: {
    question: 'من هو هداف كأس العالم عبر التاريخ؟',
    options: ['ميروسلاف كلوزه', 'رونالدو', 'ميسي'],
    answer: 'ميروسلاف كلوزه'
  },
  18: {
    question: 'من هو قائد منتخب الأرجنتين في كأس العالم 2022؟',
    options: ['دي ماريا', 'ميسي', 'أوتاميندي'],
    answer: 'ميسي'
  },
  19: {
    question: 'من هو أشهر مدافع في تاريخ إيطاليا؟',
    options: ['بونوتشي', 'مالديني', 'كانافارو'],
    answer: 'مالديني'
  },
  20: {
    question: 'أين أقيمت كأس العالم 2022؟',
    options: ['قطر', 'روسيا', 'ألمانيا'],
    answer: 'قطر'
  }
}
let activeFootball = {
  number: null,
  answer: null,
  timeout: null,
  answered: false
}
// بيانات أسئلة الأنمي
const animeQuestions = {
  1: {
    question: 'من هو من قتل غوجو ساتورو؟',
    options: ['سوكونا', 'كريف', 'يوجي'],
    answer: 'سوكونا'
  },
  2: {
    question: 'من هو الهوكاجي السابع؟',
    options: ['ميناتو', 'ناروتو', 'كاكاشي'],
    answer: 'ناروتو'
  },
  3: {
    question: 'من هو قبطان قبعة القش؟',
    options: ['لوفي', 'زورو', 'سانجي'],
    answer: 'لوفي'
  },
  4: {
    question: 'من هو قاتل إيتاتشي؟',
    options: ['مادارا', 'ساسكي', 'أوبيتو'],
    answer: 'ساسكي'
  },
  5: {
    question: 'من هو والد غون؟',
    options: ['جين', 'كايت', 'ليوريو'],
    answer: 'جين'
  },
  6: {
    question: 'من يمتلك تيتان المؤسس؟',
    options: ['راينر', 'إيرين', 'آني'],
    answer: 'إيرين'
  },
  7: {
    question: 'من هو قائد فرقة الاستطلاع؟',
    options: ['ليفاي', 'إيروين', 'هانجي'],
    answer: 'ليفاي'
  },
  8: {
    question: 'من هو غول طوكيو؟',
    options: ['توكا', 'كانيكي', 'أريما'],
    answer: 'كانيكي'
  },
  9: {
    question: 'من هو الشينيغامي مع لايت؟',
    options: ['ريوك', 'إل', 'رام'],
    answer: 'ريوك'
  },
  10: {
    question: 'من هو سايتاما؟',
    options: ['البطل المقنع', 'الرجل بنقرة', 'كابتن تسوباسا'],
    answer: 'الرجل بنقرة'
  },
  11: {
    question: 'من هو محقق ديث نوت؟',
    options: ['إل', 'واتاري', 'نيير'],
    answer: 'إل'
  },
  12: {
    question: 'من هو خصم تانجيرو الرئيسي؟',
    options: ['موزان', 'رينغوكو', 'إينوسكي'],
    answer: 'موزان'
  },
  13: {
    question: 'من هو من يستخدم رسائل الموت؟',
    options: ['لايت', 'مات', 'إل'],
    answer: 'لايت'
  },
  14: {
    question: 'من هو الذي يمتلك عين الشارينغان؟',
    options: ['ساسكي', 'غارا', 'روك لي'],
    answer: 'ساسكي'
  },
  15: {
    question: 'من هو ملك القراصنة؟',
    options: ['لوفي', 'روجر', 'اللحية البيضاء'],
    answer: 'روجر'
  },
  16: {
    question: 'من هو قائد الأكاتسوكي؟',
    options: ['باين', 'إيتاتشي', 'توبّي'],
    answer: 'باين'
  },
  17: {
    question: 'من هو أخو ألفونس؟',
    options: ['إدوارد', 'هيوز', 'رووي'],
    answer: 'إدوارد'
  },
  18: {
    question: 'من هو الذي يتحول لسوبر سايان؟',
    options: ['غوكو', 'بيكولو', 'كريلين'],
    answer: 'غوكو'
  },
  19: {
    question: 'من هو صديق كيلوا؟',
    options: ['كورابيكا', 'غون', 'هيسوكا'],
    answer: 'غون'
  },
  20: {
    question: 'من هو مستخدم أنفاس الشمس؟',
    options: ['تانجيرو', 'رينغوكو', 'توميكا'],
    answer: 'تانجيرو'
  }
}

let activeAnime = {
  number: null,
  answer: null,
  timeout: null,
  answered: false
}
let ownerReactToggle = true;

const jokes = [
  "😂 مرة واحد دخل محل موبايلات قال للبائع: عندك تلفون ضد الغباء؟ قاله: لا بس عندي كفر 😅",
  "🤣 مرة واحد بخيل اتجوز بخيلة، خلفوا ولد سموه حصالة.",
  "😆 واحد راح للدكتور قاله كل ما أشرب شاي أحس بألم في عيني، قاله الدكتور: شيل الملعقة قبل ما تشرب!",
  "😂 مرة واحد اشترى نظارة جديدة، راح يقرأ الجرائد القديمة يشوف الأخبار تغيرت ولا لأ.",
  "🤣 مرة واحد فتح محل كتب، كتب على المحل: كتبنا عليكم الصيام.",
  "😆 مرة واحد محشش سألته أمه: وين كنت؟ قالها: كنت مع الزمن الجميل.",
  "😂 مرة واحد راح للطبيب قاله: كل ما أشرب شاي أحس بحاجة تبكيني، قاله: جرب من غير بصل.",
  "🤣 واحد اشترى سيارة جديدة، كتب عليها: لا تسرقوني أنا فقير زيكم.",
  "😆 فيه نملة طاحت من فوق السرير ماتت من الضحك لأنها نكتة.",
  "😂 مرة واحد اتصل على مطعم، قاله: هل عندكم بيتزا؟ قاله: نعم، قاله: طيب شوف أحد ثاني أطلب له.",
  "🤣 مرة واحد غبي يذاكر، قال لأخوه: شوف لي حرف B كم بي؟",
  "😆 مرة واحد سأل واحد: إنت نايم؟ قاله: لا أنا في وضع حفظ الطاقة.",
  "😂 وحدة راحت تعمل دايت، حطت صورة بيتزا كخلفية للجوال حتى تتعذب كل مرة تمسكه.",
  "🤣 واحد راح البنك قالهم: ممكن أفتح حساب في فيسبوك؟ قالوا له هذا بنك! قالهم: مش كلكم بتقولوا حساب؟",
  "😆 مرة مدرس رياضيات خلف ولد، سماه: زايد.",
  "😂 واحد سأل صاحبه: إذا شربت شاي بالنعناع، تعتبرني شارب نعناع ولا شاي؟",
  "🤣 مرة واحد مشى جنب مستشفى المجانين، سمعهم بيغنوا: كلنا في الهوا سوا... راح وقع في البالوعة، قالوا له: تحت تحت!",
  "😆 مرة واحد تعب راح لطبيب نفسي، قاله: أنا بتخيل نفسي تلاجة، قاله الدكتور: هدي شوي لا تسرب غاز.",
  "😂 واحد بخيل عمل حفلة، كتب على الدعوة: الحضور بالبطاقة التموينية.",
  "🤣 مرة واحد غبي فتح مطعم سماه: (أكلك علينا)... وبعد شهر أفلس.",
  "😆 مرة واحد نام وهو فاتح الكتاب، صحى والكتاب حافظه.",
  "😂 محشش اتصل على مطعم، قالهم: عندكم عشاء لاثنين؟ قالوا: نعم، قالهم: طيب تعالوا عندي أنا جوعان.",
  "🤣 واحد جاله صرصور في بيته، كتب إعلان: للكراء، شقة مؤثثة بصديق قديم.",
  "😆 واحد يسأل الثاني: بتحب البامية؟ قاله: لا، قاله: بتعرفها؟ قاله: لا، قاله: ليه بتكرهها؟",
  "😂 مرة نملة ركبت دراجة، وقعت... رفعت قضية ضد العجلة.",
  "🤣 واحد ذهب للجزار، قاله: عندك قلب خروف؟ قاله: عندي، قاله: لا تزعلني، كنت بسأل.",
  "😆 محشش قرر يصوم، قاله صاحبه: ليه؟ قاله: عشان أشوف طعم الجوع.",
  "😂 بنت قالت لأبوها: بابا أنا حبيت، قالها: عادي يا بنتي كلنا بنغلط.",
  "🤣 مرة واحد سأل واحد: إيش طموحك؟ قاله: أكون غني، قاله: طب ما تطمح تكون ذكي؟ قاله: لا كده كده مش هعرف أحققها.",
  "😆 واحد سأل جوجل: من أنا؟ رد عليه: بيانات غير كافية.",
];
let sentJokes = {};
const generalFacts = [
  "القرش لا ينام طوال حياته.",
  "أطول نهر في العالم هو نهر النيل.",
  "أول دولة استخدمت طابعة ورقية هي الصين.",
  "القلب يدق حوالي 100,000 مرة في اليوم.",
  "أسرع حيوان على وجه الأرض هو الفهد.",
  "المشتري هو أكبر كوكب في النظام الشمسي.",
  "اللغة الأكثر تحدثًا في العالم هي الصينية.",
  "يحتوي دم الإنسان على الحديد.",
  "العنكبوت ليس من فصيلة الحشرات.",
  "النحلة تموت بعد أن تلسع.",
  "الكهرباء تُكتشف في القرن الثامن عشر.",
  "الذهب لا يصدأ أبدًا.",
  "الزرافة لا تصدر أي صوت تقريبًا.",
  "الخفاش هو الثديي الوحيد القادر على الطيران.",
  "النيزك يحترق عندما يدخل الغلاف الجوي.",
  "العقل البشري يحتوي على 100 مليار خلية عصبية.",
  "القطط ترى في الظلام أفضل من البشر.",
  "أول من مشى على سطح القمر هو نيل آرمسترونغ.",
  "أكثر حاسة قوية عند الكلاب هي الشم.",
  "الأخطبوط يملك ثلاث قلوب.",
  "الفيل لا يستطيع القفز.",
  "التمساح لا يستطيع إخراج لسانه.",
  "أطول عضلة في جسم الإنسان هي عضلة الفخذ.",
  "الحوت الأزرق هو أكبر حيوان على الإطلاق.",
  "الكرة الأرضية مغطاة بـ 71٪ ماء.",
  "التمساح يستطيع العيش بدون طعام لشهور.",
  "الحيوان الذي لا يشرب الماء أبدًا هو الكنغر البري.",
  "الضوء يستغرق 8 دقائق للوصول من الشمس إلى الأرض.",
  "الحرير يُستخرج من دودة القز.",
  "النحل يتعرف على الوجوه كالبشر."
];

let usedFacts = [];
const footballFacts = [
  "بيليه هو اللاعب الوحيد الذي فاز بكأس العالم 3 مرات.",
  "أسرع هدف في تاريخ كأس العالم سُجل بعد 11 ثانية.",
  "رونالدو البرازيلي سجل 15 هدفًا في كأس العالم.",
  "ليونيل ميسي هو أكثر من صنع أهداف في كأس العالم.",
  "كريستيانو رونالدو هو أول لاعب يسجل في 5 نسخ من كأس العالم.",
  "زيدان طُرد في نهائي كأس العالم 2006 بسبب النطحة الشهيرة.",
  "مارادونا سجل هدفًا بيده وسُمي 'يد الله'.",
  "ريال مدريد هو النادي الأكثر تتويجًا بدوري الأبطال.",
  "أكثر منتخب حصل على كأس العالم هو البرازيل (5 مرات).",
  "أول كأس عالم أقيمت في أوروغواي عام 1930.",
  "محمد صلاح من أكثر اللاعبين تسجيلًا في موسم واحد للبريميرليج.",
  "الأرجنتين فازت بكأس العالم 2022 بقيادة ميسي.",
  "الحكم يمكنه طرد مدرب الفريق بالبطاقة الحمراء.",
  "عدد حكام المباراة هو 4 (الساحة، مساعدين، رابع).",
  "أكبر نتيجة في تاريخ كأس العالم كانت 10-1.",
  "يوفنتوس هبط للدرجة الثانية بسبب فضيحة تلاعب.",
  "نيمار هو أكثر لاعب تعرض للعرقلة في كأس العالم 2018.",
  "أول هدف ذهبي في كأس العالم سجله لوران بلان.",
  "مانشستر سيتي فاز بالثلاثية التاريخية في 2023.",
  "الدوري الإنجليزي هو الأقوى من حيث المشاهدة عالميًا.",
  "أول كأس أمم أفريقيا أُقيمت عام 1957.",
  "الكاميرون أكثر المنتخبات الإفريقية فوزًا بكأس الأمم.",
  "أول لاعب عربي يسجل هاتريك في كأس العالم هو السعودي سامي الجابر.",
  "الكرة المستعملة في كأس العالم 2018 كانت 'Telstar 18'.",
  "أول ركلة جزاء في كأس العالم كانت عام 1930.",
  "كأس العالم للسيدات بدأ عام 1991.",
  "الحكم لا يمكنه تغيير قراره بعد استئناف اللعب.",
  "الهدف الذهبي ألغي بعد 2004.",
  "عدد الفرق المشاركة في كأس العالم 2026 سيكون 48.",
  "أصغر لاعب شارك في كأس العالم هو نورمان وايتسايد بعمر 17 عامًا."
];

let usedFootballFacts = [];
const christianVerses = [
  "«أُحِبُّوا بَعْضُكُمْ بَعْضًا كَمَا أَحْبَبْتُكُمْ أَنَا» - يوحنا ١٣:٣٤",
  "«كُلَّ مَا تُرِيدُونَ أَنْ يَفْعَلَ النَّاسُ بِكُمْ، افْعَلُوا هكَذَا أَنْتُمْ أَيْضًا بِهِمْ» - متى ٧:١٢",
  "«الرَّبُّ نُورِي وَخَلاَصِي، مِمَّنْ أَخَافُ؟» - مزمور ٢٧:١",
  "«لَا تَدِينُوا لِكَيْ لاَ تُدَانُوا» - متى ٧:١",
  "«الرَّبُّ رَاعِيَّ فَلَا يُعْوِزُنِي شَيْءٌ» - مزمور ٢٣:١",
  "«تَعَالَوْا إِلَيَّ يَا جَمِيعَ الْمُتْعَبِينَ» - متى ١١:٢٨",
  "«سَلاَمِي أُعْطِيكُمْ» - يوحنا ١٤:٢٧",
  "«مَنْ يُثَابِرْ إِلَى الْمُنْتَهَى فَهُوَ يُخَلَّصُ» - متى ٢٤:١٣",
  "«بِالنِّعْمَةِ أَنْتُمْ مُخَلَّصُونَ» - أفسس ٢:٨",
  "«لاَ تَهْتَمُّوا لِشَيْءٍ» - فيلبي ٤:٦",
  "«طُوبَى لِلْوُدَعَاءِ، لِأَنَّهُمْ يَرِثُونَ الْأَرْضَ» - متى ٥:٥",
  "«كُونُوا رُحَمَاءَ، كَمَا أَنَّ أَبَاكُمْ رَحِيمٌ» - لوقا ٦:٣٦",
  "«إِنْ أَحْبَبْتُمْ بَعْضُكُمْ بَعْضًا، فَبِهَذَا يَعْرِفُ الْجَمِيعُ أَنَّكُمْ تَلَامِيذِي» - يوحنا ١٣:٣٥",
  "«كُلُّ شَيْءٍ يَجْتَمِعُ لِلْخَيْرِ لِلَّذِينَ يُحِبُّونَ اللهَ» - رومية ٨:٢٨",
  "«الرب قريب لكل من يدعوه» - مزمور ١٤٥:١٨",
  "«الذي فيكم أعظم من الذي في العالم» - ١ يوحنا ٤:٤",
  "«اثبتوا في محبتي» - يوحنا ١٥:٩",
  "«لِيَ الْحَيَاةُ هِيَ الْمَسِيحُ» - فيلبي ١:٢١",
  "«سراجٌ لرجلي كلامك» - مزمور ١١٩:١٠٥",
  "«كُونُوا نَاسِكِينَ وَاصْحُوا» - بطرس الأولى ٥:٨",
  "«مَجْدًا لِلَّهِ فِي الْعُلاَ» - لوقا ٢:١٤",
  "«لاَ تَخَفْ، لأَنِّي مَعَكَ» - إشعياء ٤١:١٠",
  "«اغفروا يُغفر لكم» - لوقا ٦:٣٧",
  "«كُونُوا مُتَمَثِّلِينَ بِاللَّهِ كَأَوْلاَدٍ أَحِبَّاءَ» - أفسس ٥:١",
  "«فِي الضِّيقِ تَفَاءَلُوا، لِأَنِّي قَدْ غَلَبْتُ الْعَالَمَ» - يوحنا ١٦:٣٣",
  "«أحْسِنُوا إِلَى مُبْغِضِيكُمْ» - لوقا ٦:٢٧",
  "«مَنْ يُحِبُّ أَخَاهُ، يَثْبُتُ فِي النُّورِ» - ١ يوحنا ٢:١٠",
  "«اِفْرَحُوا فِي الرَّبِّ كُلَّ حِينٍ» - فيلبي ٤:٤",
  "«كُلُّ مَا تَفْعَلُونَهُ، فَافْعَلُوا كُلَّ شَيْءٍ لِمَجْدِ اللهِ» - ١ كورنثوس ١٠:٣١",
  "«مَن يزرع بالبركة فبالبركة أيضًا يحصد» - ٢ كورنثوس ٩:٦"
];
// 🟨 ضع هذا في أعلى ملفك index.js بعد تعاريف المتغيرات الرئيسية
let mutedUsers = {}
const islamicVerses = [
  '﴿ إِنَّ مَعَ الْعُسْرِ يُسْرًا ﴾ [الشرح:6]',
  '﴿ وَعَسَىٰ أَن تَكْرَهُوا۟ شَيْـًٔا وَهُوَ خَيْرٌۭ لَّكُمْ ﴾ [البقرة:216]',
  '﴿ لَا تَقْنَطُوا۟ مِن رَّحْمَةِ ٱللَّهِ ﴾ [الزمر:53]',
  '﴿ وَمَا تَوْفِيقِىٓ إِلَّا بِٱللَّهِ ﴾ [هود:88]',
  '﴿ إِنَّ ٱللَّهَ مَعَ ٱلصَّـٰبِرِينَ ﴾ [البقرة:153]',
  '﴿ فَإِنَّ مَعَ ٱلْعُسْرِ يُسْرًا ﴾ [الشرح:5]',
  '﴿ رَّبِّ ٱشْرَحْ لِى صَدْرِى ﴾ [طه:25]',
  '﴿ وَمَن يَتَّقِ ٱللَّهَ يَجْعَل لَّهُۥ مَخْرَجًۭا ﴾ [الطلاق:2]',
  '﴿ وَقُل رَّبِّ زِدْنِى عِلْمًۭا ﴾ [طه:114]',
  '﴿ فَصَبْرٌۭ جَمِيلٌۭ ﴾ [يوسف:18]',
  '﴿ إِنَّ رَبِّى لَسَمِيعُ ٱلدُّعَآءِ ﴾ [إبراهيم:39]',
  '﴿ وَرَحْمَتِى وَسِعَتْ كُلَّ شَىْءٍ ﴾ [الأعراف:156]',
  '﴿ إِنَّ ٱللَّهَ غَفُورٌۭ رَّحِيمٌۭ ﴾ [البقرة:173]',
  '﴿ فَإِنِّى قَرِيبٌ ﴾ [البقرة:186]',
  '﴿ ٱللهُ نُورُ ٱلسَّمَـٰوَٰتِ وَٱلْأَرْضِ ﴾ [النور:35]',
  '﴿ وَمَا تَدْرِى نَفْسٌۭ مَّاذَا تَكْسِبُ غَدًۭا ﴾ [لقمان:34]',
  '﴿ وَلَا تَهِنُوا۟ وَلَا تَحْزَنُوا۟ ﴾ [آل عمران:139]',
  '﴿ إِنَّ مَعَ ٱلصَّبْرِ نَصْرًۭا ﴾ [الأنفال:46]',
  '﴿ إِنَّ رَبِّى قَرِيبٌۭ مُّجِيبٌۭ ﴾ [هود:61]',
  '﴿ إِنَّ ٱللَّهَ كَانَ عَلَيْكُمْ رَقِيبًۭا ﴾ [النساء:1]',
  '﴿ ٱللَّهُ خَيْرٌۭ حَـٰفِظًۭا ﴾ [يوسف:64]',
  '﴿ إِنَّ ٱللَّهَ لَا يُضِيعُ أَجْرَ ٱلْمُحْسِنِينَ ﴾ [التوبة:120]',
  '﴿ وَعِندَهُۥ مَفَاتِحُ ٱلْغَيْبِ ﴾ [الأنعام:59]',
  '﴿ وَٱسْتَعِينُوا۟ بِٱلصَّبْرِ وَٱلصَّلَوٰةِ ﴾ [البقرة:45]',
  '﴿ إِنَّ ٱللَّهَ يُحِبُّ ٱلتَّوَّابِينَ ﴾ [البقرة:222]',
  '﴿ وَمَن يَتَوَكَّلْ عَلَى ٱللَّهِ فَهُوَ حَسْبُهُ ﴾ [الطلاق:3]',
  '﴿ إِنَّهُۥ بِكُلِّ شَىْءٍۢ عَلِيمٌۭ ﴾ [الأنعام:101]',
  '﴿ ٱللَّهُ لَآ إِلَـٰهَ إِلَّا هُوَ ﴾ [البقرة:255]',
  '﴿ ٱلْحَمْدُ لِلَّهِ رَبِّ ٱلْعَـٰلَمِينَ ﴾ [الفاتحة:2]',
  '﴿ وَمَا بِكُم مِّن نِّعْمَةٍۢ فَمِنَ ٱللَّهِ ﴾ [النحل:53]'
]
// كائن لحالات العبودية
let slaveMode = {};
const flagActivities = [
  { flag: '🇦🇷', country: 'الأرجنتين' },
  { flag: '🇧🇷', country: 'البرازيل' },
  { flag: '🇸🇦', country: 'السعودية' },
  { flag: '🇪🇬', country: 'مصر' },
  { flag: '🇯🇵', country: 'اليابان' },
  { flag: '🇩🇪', country: 'ألمانيا' },
  { flag: '🇫🇷', country: 'فرنسا' },
  { flag: '🇨🇳', country: 'الصين' },
  { flag: '🇮🇹', country: 'إيطاليا' },
  { flag: '🇲🇦', country: 'المغرب' },
  { flag: '🇹🇳', country: 'تونس' },
  { flag: '🇩🇿', country: 'الجزائر' },
  { flag: '🇰🇼', country: 'الكويت' },
  { flag: '🇶🇦', country: 'قطر' },
  { flag: '🇦🇪', country: 'الإمارات' },
  { flag: '🇵🇸', country: 'فلسطين' },
  { flag: '🇱🇧', country: 'لبنان' },
  { flag: '🇸🇾', country: 'سوريا' },
  { flag: '🇮🇶', country: 'العراق' },
  { flag: '🇸🇩', country: 'السودان' },
  { flag: '🇺🇸', country: 'أمريكا' },
  { flag: '🇨🇦', country: 'كندا' },
  { flag: '🇬🇧', country: 'بريطانيا' },
  { flag: '🇪🇸', country: 'إسبانيا' },
  { flag: '🇳🇱', country: 'هولندا' },
  { flag: '🇸🇪', country: 'السويد' },
  { flag: '🇳🇴', country: 'النرويج' },
  { flag: '🇮🇳', country: 'الهند' },
  { flag: '🇰🇷', country: 'كوريا الجنوبية' },
  { flag: '🇹🇷', country: 'تركيا' },
];
let currentFlag = null;
let usedFlags = [];
let flagAnswered = false;
const catMode = {};
const typingTimers = {}
    const spingames = {};
// 💰 إعداد نظام البنك
const bankDB = JSON.parse(fs.existsSync('./bank.json') ? fs.readFileSync('./bank.json') : '{}')
const saveBank = () => fs.writeFileSync('./bank.json', JSON.stringify(bankDB, null, 2))

const levels = [
  { name: "فقير جدًا", limit: 50, min: 0, max: 10000 },
  { name: "فقير", limit: 150, min: 10000, max: 30000 },
  { name: "محتاج", limit: 300, min: 30000, max: 70000 },
  { name: "مبتدئ", limit: 600, min: 70000, max: 140000 },
  { name: "عادي", limit: 1000, min: 140000, max: 400000 },
  { name: "متوسط", limit: 2000, min: 400000, max: 600000 },
  { name: "غني", limit: 3500, min: 600000, max: 999999 },
  { name: "مليونير", limit: 6000, min: 1000000, max: 9999999 },
  { name: "ملياردير", limit: 10000, min: 1000000000, max: 999999999 }
]

function getUserBank(id) {
  if (!bankDB[id]) {
    bankDB[id] = { balance: 0 }
    saveBank()
  }
  return bankDB[id]
}

function getUserLevel(balance) {
  for (let i = 0; i < levels.length; i++) {
    if (balance >= levels[i].min && balance < levels[i].max) {
      return { level: levels[i].name, limit: levels[i].limit }
    }
  }
  // بدلًا من "أسطورة"، نُعيد المستوى الأخير (ملياردير)
  const lastLevel = levels[levels.length - 1]
  return { level: lastLevel.name, limit: lastLevel.limit }
}
const startBot = async () => {
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info')
  const { version } = await fetchLatestBaileysVersion()

  const sock = makeWASocket({
    version,
    auth: state
  })

  sock.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0]
    if (!msg.message || msg.key.fromMe) return

    const isGroup = msg.key.remoteJid.endsWith('@g.us')
    const internalId = msg.key.participant || msg.key.remoteJid
    const chatId = msg.key.remoteJid

    if (!botEnabled && internalId !== ownerId) return

    let text = ''
    if (msg.message.conversation) text = msg.message.conversation
    else if (msg.message.extendedTextMessage?.text) text = msg.message.extendedTextMessage.text
const axios = require('axios')
const { exec } = require('child_process')
const fs = require('fs')
const sender = msg.key.participant || msg.key.remoteJid;
if (bannedUsers.includes(sender)) return;
const from = msg.key.remoteJid
// هذا يفترض أن لديك المتغيرات التالية معرفة مسبقاً:
// - sock (الموديل المسؤول عن الإرسال)
// - msg (الرسالة الأصلية)
// - chatId (رقم الشات)
// - text (نص الرسالة)
if (bannedUsers.includes(sender)) return
const userEmojis = autoReactData[sender];
if (userEmojis && userEmojis.length > 0) {
  autoReactData[`__index_${sender}`] = (autoReactData[`__index_${sender}`] || 0) + 1;
  const index = autoReactData[`__index_${sender}`] % userEmojis.length;
  const emoji = userEmojis[index];

  await sock.sendMessage(chatId, { react: { text: emoji, key: msg.key } });
  saveAutoReact();
}
if (isGroup) {
    try {
        // إرسال حالة "يكتب..."
        await sock.sendPresenceUpdate('composing', chatId)

        // إذا كان هناك مؤقت نشط لهذه المجموعة، نحذفه
        if (typingTimers[chatId]) {
            clearTimeout(typingTimers[chatId])
        }

        // تعيين مؤقت جديد لمدة دقيقة
        typingTimers[chatId] = setTimeout(async () => {
            await sock.sendPresenceUpdate('paused', chatId)
            delete typingTimers[chatId]
        }, 60 * 1000)
    } catch (err) {
        console.error('خطأ في تشغيل حالة الكتابة:', err)
    }
}
try {
  const remoteJid = msg.key.remoteJid; // جروب أو شخصي
  const from = msg.key.participant || msg.key.remoteJid; // مرسل الرسالة
  const text = (msg.message?.conversation || msg.message?.extendedTextMessage?.text || '')?.trim() || '';

  // فقط نعمل في مجموعات
  if (!remoteJid || !remoteJid.endsWith('@g.us')) return;
if (text === '.حقائق كروية') {
  if (usedFootballFacts.length === footballFacts.length) {
    usedFootballFacts = []; // إعادة التهيئة بعد استخدام كل الحقائق
  }

  const remainingFacts = footballFacts.filter(fact => !usedFootballFacts.includes(fact));
  const randomFact = remainingFacts[Math.floor(Math.random() * remainingFacts.length)];

  usedFootballFacts.push(randomFact);
const from = msg.key.remoteJid;

  await sock.sendMessage(from, { text: `⚽ حقيقة كروية:\n\n${randomFact}` }, { quoted: msg });
}
if (text === '.معلومات عامة') {
  if (usedFacts.length === generalFacts.length) {
    usedFacts = []; // إعادة التهيئة بعد استخدام كل المعلومات
  }

  // احصل على معلومات لم يتم استخدامها
  const remainingFacts = generalFacts.filter(fact => !usedFacts.includes(fact));
  const randomFact = remainingFacts[Math.floor(Math.random() * remainingFacts.length)];

  usedFacts.push(randomFact); // أضفها للقائمة المستخدمة
const from = msg.key.remoteJid;

  await sock.sendMessage(from, { text: `🧠 معلومة عامة:\n\n${randomFact}` }, { quoted: msg });
}

if (text?.startsWith('.حظر') || text?.startsWith('.فك الحظر')) {
    if (sender !== '38989813805275@lid') return

    let mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]
    let replied = msg.message?.extendedTextMessage?.contextInfo?.participant
    let target = mentioned || replied

    if (!target) {
      await sock.sendMessage(msg.key.remoteJid, {
        text: '❌ يجب الرد على رسالة أو منشن المستخدم لحظره أو فكه.',
      }, { quoted: msg })
      return
    }

    if (text.startsWith('.حظر')) {
      if (bannedUsers.includes(target)) {
        await sock.sendMessage(msg.key.remoteJid, {
          text: '🔒 المستخدم محظور بالفعل.',
        }, { quoted: msg })
      } else {
        bannedUsers.push(target)
        saveBannedUsers()
        await sock.sendMessage(msg.key.remoteJid, {
          text: `✅ تم حظر @${target.split('@')[0]} من استخدام البوت.`,
          mentions: [target],
        }, { quoted: msg })
      }
    }

    if (text.startsWith('.فك الحظر')) {
      if (!bannedUsers.includes(target)) {
        await sock.sendMessage(msg.key.remoteJid, {
          text: 'ℹ️ المستخدم غير محظور.',
        }, { quoted: msg })
      } else {
        bannedUsers = bannedUsers.filter(u => u !== target)
        saveBannedUsers()
        await sock.sendMessage(msg.key.remoteJid, {
          text: `🔓 تم فك الحظر عن @${target.split('@')[0]}.`,
          mentions: [target],
        }, { quoted: msg })
      }
    }
  }
// 💰 .بنك
  if (text === '.بنك') {
  const user = getUserBank(internalId)
  const { level, limit } = getUserLevel(user.balance)
  const bankText = `
╔═━━━═⊰ 💳 بنك النقابة ⊱═━━━═╗
║      🔹 حسابك البنكي هنا 🔹      ║
╟────────────────────────────╢
║ 👤 المنشن: @${internalId.split('@')[0]}  
║ 💰 الثروة: ${user.balance} جنيه  
║ 📊 الحالة: ${level}  
╟────────────────────────────╢
║ 🏦 هذا بنك النقابة الرسمي                
║ ✦ اكتب: "ايداع <المبلغ>"               
║ ✦ أو العب فعاليات واكسب الذهب 💸     
╚═━━━═⊰ 🤖 Zenitsu Bot ⊱═━━━═╝`

  await sock.sendMessage(chatId, {
    text: bankText,
    mentions: [internalId]
  }, { quoted: msg })
}
if (text.startsWith('.كرة')) {
  const num = parseInt(text.split(' ')[1])
  if (!num || !footballQuestions[num]) {
    await sock.sendMessage(chatId, { text: '❌ رقم السؤال غير صحيح أو غير موجود (من 1 إلى 20).' }, { quoted: msg })
    return
  }

  if (activeFootball.answered === false && activeFootball.number !== null) {
    await sock.sendMessage(chatId, { text: '❗ هناك سؤال قيد اللعب، انتظر حتى ينتهي.' }, { quoted: msg })
    return
  }

  const q = footballQuestions[num]
  const questionText =
    `╭━━━【⚽ سؤال كرة القدم ${num} 】━━━╮\n` +
    `┃\n` +
    `┃ 🧠 *${q.question}*\n` +
    `┃\n` +
    `┃ - ${q.options[0]}\n` +
    `┃ - ${q.options[1]}\n` +
    `┃ - ${q.options[2]}\n` +
    `╰━━━━━━━━━━━━━━━━━━━━╯`

  await sock.sendMessage(chatId, { text: questionText }, { quoted: msg })

  activeFootball = {
    number: num,
    answer: q.answer,
    answered: false
  }
}

if (activeFootball.answer && text.trim() === activeFootball.answer && !activeFootball.answered) {
  activeFootball.answered = true

  const winnerMention = msg.key.participant || msg.key.remoteJid
  await sock.sendMessage(chatId, {
    text:
      `╭━━━┫ 🎊 تهانينا 🎊 ┣━━━╮\n` +
      `الفائز @${winnerMention.split('@')[0]}\n` +
      `┃ ✅ لقد أنهيت السؤال بنجاح\n` +
      `┃ ⚽ انت خبير كروي\n` +
      `┃ 🤝 استمر في التعلم والمعرفة\n` +
      `╰━━━━━━━━━━━━━━━━━━╯`,
    mentions: [winnerMention]
  }, { quoted: msg })

  // ❗ إعادة تعيين الحالة بعد إعلان الفائز
  activeFootball = {
    number: null,
    answer: null,
    answered: false
  }
}
if (text === '.النكات') {
  const from = msg.key.remoteJid; // ✅ مهم: هذا يحل خطأ "from is not defined"
  const senderId = msg.key.participant || msg.key.remoteJid; // معرف الشخص الذي أرسل الرسالة

  if (!sentJokes[senderId]) sentJokes[senderId] = [];

  const remainingJokes = jokes.filter((_, i) => !sentJokes[senderId].includes(i));

  if (remainingJokes.length === 0) {
    sentJokes[senderId] = [];
  }

  const freshJokes = jokes.filter((_, i) => !sentJokes[senderId].includes(i));
  const randomIndex = Math.floor(Math.random() * freshJokes.length);
  const joke = freshJokes[randomIndex];
  const actualIndex = jokes.indexOf(joke);

  sentJokes[senderId].push(actualIndex);

  await sock.sendMessage(from, { text: joke }, { quoted: msg });
}
if (text.startsWith('.مخفي') && isGroup) {
  const metadata = await sock.groupMetadata(chatId);
  const allMembers = metadata.participants.map(p => p.id);

  const textToSend = text.slice(6).trim();
  if (!textToSend) {
    return await sock.sendMessage(chatId, {
      text: '❌ اكتب الرسالة بعد الأمر.',
      quoted: msg
    });
  }

  // رسالة فيها منشن مخفي فقط
  await sock.sendMessage(chatId, {
    text: textToSend,
    mentions: allMembers
  });
}
    // 💵 .ايداع بدون رقم
    if (text === '.ايداع') {
      const user = getUserBank(internalId)
      const { limit } = getUserLevel(user.balance)
      if (user.balance + 1 > limit) {
        await sock.sendMessage(chatId, {
          text: `❌ لقد وصلت حدك الأعلى وهو ${limit} جنيه.\n💡 حالتك لا تسمح بإيداع أكثر.`,
        }, { quoted: msg })
      } else {
        user.balance += 1
        saveBank()
        await sock.sendMessage(chatId, {
          text: `✅ تم إيداع 1 جنيه. رصيدك الحالي: ${user.balance}`
        }, { quoted: msg })
      }
    }
if (text.startsWith('.انمي')) {
  const num = parseInt(text.slice(5).trim());

  if (isNaN(num) || !animeQuestions[num]) return;

  if (activeAnime.answered && activeAnime.number === num) {
    await sock.sendMessage(chatId, { text: '❌ السؤال خلصان من بدري يا حلو 😅' }, { quoted: msg });
    return;
  }

  const q = animeQuestions[num];
  const questionText = `
╭━━━【🎌 سؤال أنمي ${num} 】━━━╮
┃
┃ 🧠 ${q.question}
┃
┃ - ${q.options[0]}
┃ - ${q.options[1]}
┃ - ${q.options[2]}
┃
╰━━━━━━━━━━━━━━━━━━━━╯`;

  activeAnime = {
    number: num,
    answer: q.answer,
    answered: false
  };

  await sock.sendMessage(chatId, { text: questionText }, { quoted: msg });
}

if (
  activeAnime.number !== null &&
  !activeAnime.answered &&
  text.trim() === activeAnime.answer
) {
  activeAnime.answered = true;
  const sender = msg.key.participant || msg.key.remoteJid;

  await sock.sendMessage(chatId, {
    text: `╭━━━┫ 🎊 *تهانينا* 🎊 ┣━━━╮
الفائز @${sender.split('@')[0]}
┃ ✅ لقد أنهيت السؤال بنجاح
┃ 💐 انت اوتاكو مخضرم
┃ 🤝 استمر في المشاهده والتعلم
╰━━━━━━━━━━━━━━━━━━╯`,
    mentions: [sender]
  }, { quoted: msg });

  // ✨ إعادة ضبط الحالة مباشرة بعد إعلان الفائز
  activeAnime = {
    number: null,
    answer: null,
    answered: false
  };
}
    // 💵 .ايداع رقم
    if (text.startsWith('.ايداع ')) {
      const amount = parseInt(text.split('.ايداع ')[1])
      if (isNaN(amount) || amount <= 0) {
        await sock.sendMessage(chatId, {
          text: '⚠️ يجب كتابة رقم صحيح بعد .ايداع'
        }, { quoted: msg })
        return
      }

      const user = getUserBank(internalId)
      const { limit } = getUserLevel(user.balance)
      if (user.balance + amount > limit) {
        await sock.sendMessage(chatId, {
          text: `❌ هذا الرقم يتجاوز حدك الأعلى (${limit}).\n💰 رصيدك الحالي: ${user.balance}`
        }, { quoted: msg })
      } else {
        user.balance += amount
        saveBank()
        await sock.sendMessage(chatId, {
          text: `✅ تم إيداع ${amount} جنيه بنجاح.\n💰 رصيدك الآن: ${user.balance}`
        }, { quoted: msg })
      }
    }

if (text === '.منشن' && isGroup) {
      const metadata = await sock.groupMetadata(chatId)
      const mentions = metadata.participants.map(p => p.id)
      await sock.sendMessage(chatId, {
        text: '📢 منشن جماعي للجميع:',
        mentions
      }, { quoted: msg })
    }
 
    // 🎯 أمر تحويل المال
if (text.startsWith('.تحويل ')) {
  const amount = parseInt(text.split('.تحويل ')[1])
  if (isNaN(amount) || amount <= 0) {
    await sock.sendMessage(chatId, {
      text: '⚠️ يجب كتابة رقم صالح بعد .تحويل'
    }, { quoted: msg })
    return
  }

  const sender = getUserBank(internalId)
  let receiverId = null
  if (msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.length > 0) {
    receiverId = msg.message.extendedTextMessage.contextInfo.mentionedJid[0]
  } else if (msg.message?.extendedTextMessage?.contextInfo?.participant) {
    receiverId = msg.message.extendedTextMessage.contextInfo.participant
  }

  if (!receiverId || receiverId === internalId) {
    await sock.sendMessage(chatId, {
      text: '⚠️ يجب منشن شخص أو الرد على رسالته لإرسال المال إليه.'
    }, { quoted: msg })
    return
  }

  if (sender.balance < amount) {
    await sock.sendMessage(chatId, {
      text: `❌ لا يمكنك تحويل ${amount} جنيه لأن رصيدك ${sender.balance} فقط.`
    }, { quoted: msg })
    return
  }

  const receiver = getUserBank(receiverId)
  sender.balance -= amount
  receiver.balance += amount
  saveBank()

  const transferText = `
╔═━━━━━━ ⊰ 🔄 تحويل رسمي ⊱ ━━━━━═╗
║           💼 إشعار تحويل بنكي رسمي           ║
╟────────────────────────────╢
║ 💸 تم تحويل: ${amount} جنيه                     
║ 👤 من: @${internalId.split('@')[0]}         
║ 👥 إلى: @${receiverId.split('@')[0]}        
╟────────────────────────────╢
║        ✅ تمت العملية بنجاح ✅             
╚═━━━━━━ ⊰ 🤖 Zenitsu Bot ⊱ ━━━━━═╝`

  await sock.sendMessage(chatId, {
    text: transferText,
    mentions: [internalId, receiverId]
  }, { quoted: msg })
}

    // 🏴‍☠️ أمر السرقة (خاص بالمطور فقط)
    if (text.startsWith('.سرقة ') && internalId === ownerId) {
      const amount = parseInt(text.split('.سرقة ')[1])
      if (isNaN(amount) || amount <= 0) {
        await sock.sendMessage(chatId, {
          text: '⚠️ يجب كتابة رقم صالح بعد .سرقة'
        }, { quoted: msg })
        return
      }

      let targetId = null
      if (msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.length > 0) {
        targetId = msg.message.extendedTextMessage.contextInfo.mentionedJid[0]
      } else if (msg.message?.extendedTextMessage?.contextInfo?.participant) {
        targetId = msg.message.extendedTextMessage.contextInfo.participant
      }

      if (!targetId || targetId === internalId) {
        await sock.sendMessage(chatId, {
          text: '⚠️ يجب منشن شخص أو الرد على رسالته لسرقته.'
        }, { quoted: msg })
        return
      }

      const targetUser = getUserBank(targetId)
      const thiefUser = getUserBank(ownerId)

      if (targetUser.balance < amount) {
        await sock.sendMessage(chatId, {
          text: `❌ لا يمكن سرقة ${amount} جنيه لأن رصيد الشخص المستهدف ${targetUser.balance} فقط.`
        }, { quoted: msg })
        return
      }

      targetUser.balance -= amount
      thiefUser.balance += amount
      saveBank()

      await sock.sendMessage(chatId, {
        text: `🏴‍☠️ تمت سرقة ${amount} جنيه بنجاح!

👤 المسروق: @${targetId.split('@')[0]}
🕵️‍♂️ السارق: @${ownerId.split('@')[0]}

💰 رصيد الضحية الآن: ${targetUser.balance}
💰 رصيدك الجديد: ${thiefUser.balance}
`,
        mentions: [targetId, ownerId]
      }, { quoted: msg })
    }
// ✍️ فعالية الكتابة
    if (text === '.كتابة') {
      if (writingGames.length === 0) writingGames = [...allWritingGames]
      const randomIndex = Math.floor(Math.random() * writingGames.length)
      activeWord = writingGames[randomIndex]
      winner = null
      writingGames.splice(randomIndex, 1)

      await sock.sendMessage(chatId, {
        text: `┏━━━〔 ✍️ فعالية الكتابة 〕━━━┓

💬 المطلوب: قم بكتابة الكلمة بشكل صحيح!

📌 الكلمة: ⟪ ${activeWord} ⟫
🎤 المُقدّم: ⟪ زينيتسو ⟫
┗━━━━━━━━━━━━━━━━━━┛`
      }, { quoted: msg })
    }

    // ✅ التحقق من إجابة الكتابة
    else if (activeWord && text.trim() === activeWord) {
      if (winner) {
        await sock.sendMessage(chatId, {
          text: '❗ السؤال خلصان من بدري يا حلو'
        }, { quoted: msg })
      } else {
        winner = msg.key.participant || msg.key.remoteJid
        const user = getUserBank(winner)
        user.balance += 5000
        saveBank()

        await sock.sendMessage(chatId, {
          text: `╭━━━┫ 🎊 تهانينا 🎊 ┣━━━╮

┃ الفائز: @${winner.split('@')[0]}
✅ أنهيت الفعالية بنجاح!
┃ 💸 تمت إضافة 5K إلى رصيدك
┃ ✨ شارك دائمًا وكن الأسرع
╰━━━━━━━━━━━━━━━━━━╯
✦ اكتب: .بنك 📎 لعرض رصيدك`,
          mentions: [winner]
        }, { quoted: msg })

        activeWord = null
      }
    }

    // 🧩 فعالية التفكيك
    if (text === '.تفكيك') {
      if (splitGames.length === 0) splitGames = [...allSplitGames]
      const randomIndex = Math.floor(Math.random() * splitGames.length)
      activeSplit = splitGames[randomIndex]
      splitWinner = null
      splitGames.splice(randomIndex, 1)

      await sock.sendMessage(chatId, {
        text: `┏━━━〔 ✂️ فعالية التفكيك 〕━━━┓
💬 المطلوب: قم بتفكيك الكلمة بشكل صحيح!

📌 الكلمة: ⟪ ${activeSplit} ⟫
🎤 المُقدّم: ⟪ زينيتسو ⟫
┗━━━━━━━━━━━━━━━━━┛`
      }, { quoted: msg })
    }

    // ✅ التحقق من إجابة التفكيك
    else if (activeSplit && text.trim().replace(/ /g, '') === activeSplit) {
      if (splitWinner) {
        await sock.sendMessage(chatId, {
          text: '❗ الفعالية تم حلها بالفعل يا بطل!'
        }, { quoted: msg })
      } else {
        splitWinner = msg.key.participant || msg.key.remoteJid
        const user = getUserBank(splitWinner)
        user.balance += 5000
        saveBank()

        await sock.sendMessage(chatId, {
          text: `╭━━━┫ 🎉 تهانينا ┣━━━╮

🏆 الفائز: @${splitWinner.split('@')[0]}
✂️ أنهيت فعالية التفكيك بنجاح!
💰 تمت إضافة 5K إلى رصيدك البنكي

✨ استمر في التفاعل مع الفعاليات لتكسب أكثر!
╰━━━━━━━━━━━━━━━━━━━━╯
اكتب: .بنك 📎 لعرض رصيدك`,
          mentions: [splitWinner]
        }, { quoted: msg })

        activeSplit = null
      }
    }

    // 🔁 فعالية العكس
    if (text === '.عكس') {
      if (reverseGames.length === 0) reverseGames = [...allReverseGames]
      const randomIndex = Math.floor(Math.random() * reverseGames.length)
      activeReverse = reverseGames[randomIndex]
      reverseWinner = null
      reverseGames.splice(randomIndex, 1)

      await sock.sendMessage(chatId, {
        text: `┏━━━〔 🔁 فعالية العَكـس 〕━━━┓
💬 المطلوب: قم بعكس الكلمة بشكل صحيح!

📌 الكلمة: ⟪ ${activeReverse} ⟫  
🎤 المُقدّم: ⟪ زينيتسو ⟫
┗━━━━━━━━━━━━━━━━━━┛`
      }, { quoted: msg })
    }

    // ✅ التحقق من إجابة العكس
    else if (activeReverse && text.trim() === [...activeReverse].reverse().join('')) {
      if (reverseWinner) {
        await sock.sendMessage(chatId, {
          text: '❗ الفعالية تم حلها بالفعل يا نجم.'
        }, { quoted: msg })
      } else {
        reverseWinner = msg.key.participant || msg.key.remoteJid
        const user = getUserBank(reverseWinner)
        user.balance += 5000
        saveBank()

        await sock.sendMessage(chatId, {
          text: `╭━━━┫ 🎉 تهانينا ┣━━━╮

🏆 الفائز: @${reverseWinner.split('@')[0]}
🔁 أنهيت فعالية العَكـس بنجاح!
💰 تمت إضافة 5K إلى رصيدك البنكي

✨ استمر في التفاعل مع الفعاليات لتكسب أكثر!
╰━━━━━━━━━━━━━━━━━━━━╯
✦ اكتب: .بنك 📎 لعرض رصيدك`,
          mentions: [reverseWinner]
        }, { quoted: msg })

        activeReverse = null
      }
    }
    if (text === '.بوت') {
      const imagePath = path.join(__dirname, 'zenitsu.jpg')
      const buffer = fs.readFileSync(imagePath)
      await sock.sendMessage(chatId, {
        image: buffer,
        caption: `✦━━『 ZENITSU BOT 』━━✦

╭───────────────╮
│     ⚡  𝙕𝙀𝙉𝙄𝙏𝙎𝙐 ⚡     │
╰───────────────╯
مرحباً بك في بوت ZENITSU 💛أنا هنا لأجعل تجربتك أسهل وأمتع على واتساب!

🧩 الأوامر المتوفرة:
➤ .اوامر
➤ .المطور
➤ .الفعاليات

✨ تابعنا دائماً لتجربة متجددة ومميزة!`
      }, { quoted: msg })
    }

if (text.startsWith('.ايديت ')) {
      const query = text.split('.ايديت ')[1].trim()
      const filename = `edit_${Date.now()}.mp4`

      await sock.sendMessage(chatId, {
        text: `🎬 جاري البحث عن إيديت لـ ${query}...`
      }, { quoted: msg })

      exec(`yt-dlp -f mp4 -o "${filename}" "ytsearch1:edit ${query}"`, async (err, stdout, stderr) => {
        if (err) {
          console.error(stderr)
          await sock.sendMessage(chatId, {
            text: '❌ حدث خطأ أثناء تحميل الفيديو. تأكد من أن yt-dlp مثبت.'
          }, { quoted: msg })
          return
        }

        try {
          const videoBuffer = fs.readFileSync(path.resolve(filename))
          await sock.sendMessage(chatId, {
            video: videoBuffer,
            caption: `🎬 إيديت للشخصية: ${query}`
          }, { quoted: msg })

          fs.unlinkSync(filename)
        } catch (e) {
          console.error(e)
          await sock.sendMessage(chatId, {
            text: '⚠️ لم أستطع إرسال الفيديو.'
          }, { quoted: msg })
        }
      })
    }


if (text === '.مسيحي') {
  const randomVerse = christianVerses[Math.floor(Math.random() * christianVerses.length)]
  await sock.sendMessage(chatId, { text: `📖 آية مسيحية عشوائية:\n\n${randomVerse}` }, { quoted: msg })
}
if (text === '.الفعاليات') {
      await sock.sendMessage(chatId, {
        text: `╔═━━━━✦『 🎯 قسم الفعاليات 』✦━━━━═╗

🌟 أهلاً بك في قسم الفعاليات 🎉
⚠️ الرجاء اختيار فعاليتك فقط بدون الرد على هذه الرسالة

┌──⊰ الفعاليات المتاحة ⊱──┐
✍️ - كتابة
🧩 - تفكيك
🌍 - العلم
🔄 - العكس
🖼️ - احزر
👁️ - عين
🔥 - مسابقة 
🎡 - تدوير
🍀- دوران
☕ - كوب
└──────────────────┘

✨ استمتع وورّينا مهاراتك 🎯
╚═━━━━✦『 ZENITSU BOT 』✦━━━━═╝`
      }, { quoted: msg })
    }
if (text === '.المطور') {
      await sock.sendMessage(chatId, {
        text: `
╔═━━━✦•❃°•°❀°•°❃•✦━━━═╗
『 💻 المطـــور الرسمي 💻 』
╚═━━━✦•❃°•°❀°•°❃•✦━━━═╝

𓆩 👨‍💻 الاسم: 『 زينيتسو 』
𓆩 ☎️ الرقم: +201115393590
𓆩 📩 التواصل: واتساب فقط

💬 لا تتردد في التواصل معنا عند وجود مشكلة،
نحن هنا لخدمتكم دائمًا بكل حب واحترام 🤍
`
      }, { quoted: msg })
    }
if (text === '.v' && msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
  const quotedMsg = msg.message.extendedTextMessage.contextInfo.quotedMessage
  const type = quotedMsg.imageMessage ? 'imageMessage' :
               quotedMsg.videoMessage ? 'videoMessage' : null

  if (!type || !quotedMsg[type]?.mediaKey) {
    await sock.sendMessage(msg.key.remoteJid, { text: '❌ لا يمكن تحميل الوسائط. قد تكون شوهدت بالفعل أو غير صالحة.' }, { quoted: msg })
    return
  }

  try {
    const stream = await downloadContentFromMessage(quotedMsg[type], type === 'imageMessage' ? 'image' : 'video')
    let buffer = Buffer.from([])
    for await (const chunk of stream) {
      buffer = Buffer.concat([buffer, chunk])
    }

    await sock.sendMessage(msg.key.remoteJid, { [type === 'imageMessage' ? 'image' : 'video']: buffer }, { quoted: msg })
  } catch (err) {
await sock.sendMessage(msg.key.remoteJid, { text: '⚠️ حدث خطأ أثناء تحميل الوسائط.' }, { quoted: msg })
    console.error(err)
  }
}
if (text === '.الانمي') {
  const message = `╭━━━【🎌 قسم الأنمي 】━━━╮  
┃ ✦ اكتب "انمي" متبوعة بالرقم لاختيار السؤال  
┃  
┃ 🎌 انمي 1
┃ 🎌 انمي 2
┃ 🎌 انمي 3
┃ 🎌 انمي 4
┃ 🎌 انمي 5
┃ 🎌 انمي 6
┃ 🎌 انمي 7
┃ 🎌 انمي 8
┃ 🎌 انمي 9
┃ 🎌 انمي 10
┃ 🎌 انمي 11
┃ 🎌 انمي 12
┃ 🎌 انمي 13
┃ 🎌 انمي 14
┃ 🎌 انمي 15
┃ 🎌 انمي 16
┃ 🎌 انمي 17
┃ 🎌 انمي 18
┃ 🎌 انمي 19
┃ 🎌 انمي 20
╰━━━━━━━━━━━━━━━━━━━━╯`;

  await sock.sendMessage(msg.key.remoteJid, { text: message }, { quoted: msg });
}
if (text === '.الدين') {
  const form = `
╔═════ ⛪ ═════╗
       🕊️ اختر دينك 🕊️
╚═════ ⛪ ═════╝

اكتب الأمر مسبوقًا بـ (.) مثل:
مثال: .مسلم أو .مسيحي

╔═✧✦✧══════╗
┃  ✝️ .مسيحي
┃  ☪️ .مسلم
╚══════════╝
`.trim()

  await sock.sendMessage(chatId, { text: form }, { quoted: msg });
}
if (text === '.الأسئلة') {
  const message = `╭━━━【🧠 قائمة الأسئلة 】━━━╮  
┃  
┃ ⚽ فوتبول  
┃ 🎌 الأنمي  
┃  
╰━━━━━━━━━━━━━━━━━━━━╯`;

  await sock.sendMessage(msg.key.remoteJid, { text: message }, { quoted: msg });
}
if (text === '.العاب') {
  const message = {
    text: `
╭━━━✦✧✦━━━╮
        🎮 *قائمة الألعاب* 🎮
╰━━━✦✧✦━━━╯

❌⭕ *لعبة X O*
⌯ للعب اكتب: *.اكس* ثم منشن صديقك!

💡 مثال: .اكس @123456789

╰━━━✦✧✦━━━╯
`.trim()
  }

  await sock.sendMessage(from, message, { quoted: msg })
}
if (text === '.فوتبول') {
  const message = `تفضل:

╭━━━【⚽ قسم كرة القدم 】━━━╮  
┃ ✦ اكتب "كرة" متبوعة بالرقم لاختيار السؤال  
┃  
┃ ⚽ كرة 1
┃ ⚽ كرة 2
┃ ⚽ كرة 3
┃ ⚽ كرة 4
┃ ⚽ كرة 5
┃ ⚽ كرة 6
┃ ⚽ كرة 7
┃ ⚽ كرة 8
┃ ⚽ كرة 9
┃ ⚽ كرة 10
┃ ⚽ كرة 11
┃ ⚽ كرة 12
┃ ⚽ كرة 13
┃ ⚽ كرة 14
┃ ⚽ كرة 15
┃ ⚽ كرة 16
┃ ⚽ كرة 17
┃ ⚽ كرة 18
┃ ⚽ كرة 19
┃ ⚽ كرة 20
╰━━━━━━━━━━━━━━━━━━━━╯`;

  await sock.sendMessage(msg.key.remoteJid, { text: message }, { quoted: msg });
}
// 🟨 ضع هذا الكود ضمن مستمع الرسائل الرئيسية في البوت (داخل sock.ev.on('messages.upsert', async (m) => { ... }))
// هذا هو جزء التحكم في أوامر .كتم و .فك الكتم
// أمر الكتم
if (text.startsWith('.كتم') && (msg.mentionedJid?.[0] || msg.message?.extendedTextMessage?.contextInfo?.participant)) {
  const sender = msg.key.participant || msg.key.remoteJid;

  // التحقق من صلاحية النخبة أو المطور
  if (!isEliteOrOwner(sender)) {
    return sock.sendMessage(from, { text: '❌ هذا الأمر متاح فقط للنخبة والمطور الأساسي.' }, { quoted: msg });
  }

  const target = msg.mentionedJid?.[0] || msg.message.extendedTextMessage.contextInfo.participant;

  // منع كتم المطور الأساسي
  if (target === '38989813805275@lid') {
    return sock.sendMessage(from, { text: '❌ لا يمكن كتم المطور الأساسي.' }, { quoted: msg });
  }

  mutedUsers[target] = true;
  await sock.sendMessage(from, {
    text: `✅ تم كتم @${target.split('@')[0]}`,
    mentions: [target]
  }, { quoted: msg });
}

// حذف رسائل المكتومين
if (msg.key.remoteJid.endsWith('@g.us') && mutedUsers[msg.key.participant]) {
  try {
    await sock.sendMessage(msg.key.remoteJid, {
      delete: {
        remoteJid: msg.key.remoteJid,
        fromMe: false,
        id: msg.key.id,
        participant: msg.key.participant
      }
    });
  } catch (err) {
    console.error('❌ خطأ أثناء حذف رسالة مكتوم:', err);
  }
}

// أمر فك الكتم
if (text.startsWith('.فك الكتم') && (msg.mentionedJid?.[0] || msg.message?.extendedTextMessage?.contextInfo?.participant)) {
  const sender = msg.key.participant || msg.key.remoteJid;

  // التحقق من صلاحية النخبة أو المطور
  if (!isEliteOrOwner(sender)) {
    return sock.sendMessage(from, { text: '❌ هذا الأمر متاح فقط للنخبة والمطور الأساسي.' }, { quoted: msg });
  }

  const target = msg.mentionedJid?.[0] || msg.message.extendedTextMessage.contextInfo.participant;

  delete mutedUsers[target];
  await sock.sendMessage(from, {
    text: `✅ تم فك الكتم عن @${target.split('@')[0]}`,
    mentions: [target]
  }, { quoted: msg });
}
if (text === '.ترقية') {
  const from = msg.key.remoteJid; // ✅ تعريف المتغير from

  // تحقق من أن الأمر في جروب
  if (!from.endsWith('@g.us')) return sock.sendMessage(from, { text: '❌ هذا الأمر يعمل فقط داخل المجموعات.' }, { quoted: msg });

  // تحقق من أن المرسل مشرف
  const metadata = await sock.groupMetadata(from);
  const sender = msg.key.participant || msg.key.remoteJid; // ⬅️ تعريف المرسل
  const senderIsAdmin = metadata.participants.find(p => p.id === sender && (p.admin === 'admin' || p.admin === 'superadmin'));
  if (!senderIsAdmin) return sock.sendMessage(from, { text: '❌ فقط المشرفين يمكنهم استخدام هذا الأمر.' }, { quoted: msg });

  // الحصول على المعرف المراد ترقيته
  const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
  const replyJid = msg.message?.extendedTextMessage?.contextInfo?.participant;

  const targetJid = mentionedJid || replyJid;
  if (!targetJid) return sock.sendMessage(from, { text: '❌ يجب منشن عضو أو الرد على رسالته.' }, { quoted: msg });

  try {
    // ترقية العضو
    await sock.groupParticipantsUpdate(from, [targetJid], 'promote');

    // إرسال رسالة الترحيب
    const message = `╭━━━〔 🌟 استمارة ترقية ⭐ 〕━━━╮  
┃  
┃ 🎉 مبروك يا بطل!  
┃ 🏅 تم ترقية العضو إلى *مشرف*  
┃  
┃ 👤 المنشن: @${targetJid.split('@')[0]}  
┃  
┃ ونتمنى لك التوفيق في مهامك الجديدة!  
╰━━━━━━━━━━━━━━━━━━━━╯`;

    await sock.sendMessage(from, {
      text: message,
      mentions: [targetJid]
    }, { quoted: msg });

  } catch (e) {
    console.error('خطأ في الترقية:', e);
    await sock.sendMessage(from, { text: '❌ حدث خطأ أثناء الترقية. تأكد أن البوت مشرف أيضاً.' }, { quoted: msg });
  }
}
if (text === '.اعفاء') {
  const from = msg.key.remoteJid;

  // التحقق من أن الأمر في مجموعة
  if (!from.endsWith('@g.us')) return sock.sendMessage(from, { text: '❌ هذا الأمر يعمل فقط داخل المجموعات.' }, { quoted: msg });

  // التحقق أن المرسل مشرف
  const metadata = await sock.groupMetadata(from);
  const sender = msg.key.participant || msg.key.remoteJid;
  const senderIsAdmin = metadata.participants.find(p => p.id === sender && (p.admin === 'admin' || p.admin === 'superadmin'));
  if (!senderIsAdmin) return sock.sendMessage(from, { text: '❌ فقط المشرفين يمكنهم استخدام هذا الأمر.' }, { quoted: msg });

  // الحصول على المعرف المراد إعفاؤه
  const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
  const replyJid = msg.message?.extendedTextMessage?.contextInfo?.participant;

  const targetJid = mentionedJid || replyJid;
  if (!targetJid) return sock.sendMessage(from, { text: '❌ يجب منشن عضو أو الرد على رسالته.' }, { quoted: msg });

  try {
    // إزالة المشرف
    await sock.groupParticipantsUpdate(from, [targetJid], 'demote');

    // رسالة الإعفاء
    const message = `╭━━━〔 ⚠️ استمارة إعفاء 〕━━━╮  
┃  
┃ 📣 تم إعفاء العضو من مهام *الإشراف*  
┃  
┃ 👤 المنشن: @${targetJid.split('@')[0]}  
┃  
┃ ✅ شكرًا على جهودك السابقة!  
╰━━━━━━━━━━━━━━━━━━━━╯`;

    await sock.sendMessage(from, {
      text: message,
      mentions: [targetJid]
    }, { quoted: msg });

  } catch (e) {
    console.error('خطأ في الإعفاء:', e);
    await sock.sendMessage(from, { text: '❌ حدث خطأ أثناء الإعفاء. تأكد أن البوت مشرف أيضاً.' }, { quoted: msg });
  }
}
if (text === '.اوامر') {  
    const startTime = process.uptime();
    const sender = msg.key.participant || msg.key.remoteJid;  
    const mention = sender.split('@')[0];  

    function formatUptime(seconds) {
        const h = Math.floor(seconds / 3600);
        const m = Math.floor((seconds % 3600) / 60);
        const s = Math.floor(seconds % 60);
        return `${h}h ${m}m ${s}s`;
    }

    function getCurrentTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const seconds = now.getSeconds().toString().padStart(2, '0');
        return `${hours}:${minutes}:${seconds}`;
    }

    function getDate() {
        const now = new Date();
        const day = now.getDate().toString().padStart(2, '0');
        const month = (now.getMonth() + 1).toString().padStart(2, '0');
        const year = now.getFullYear();
        return `${day}/${month}/${year}`;
    }

    function getDayName() {
        return new Date().toLocaleDateString('ar-EG', { weekday: 'long' });
    }

    function buildMessage() {
        return `
╔═══❖•ೋ🌟ೋ•❖═══╗
       『 𓆩 𝒁𝑬𝑵𝑰𝑻𝑺𝑼 𝑩𝑶𝑻 𓆪 』
     🦋 البوت الأقوى على الإطلاق 🦋
╚═══❖•ೋ🌟ೋ•❖═══╝

╔═━──━══╦༻✦༺╦══━──━═╗
┃ 👤 المستخدم : @${mention}
┃ 📅 التاريخ   : ${getDate()}
┃ 📆 اليوم     : ${getDayName()}
┃ 🔄 التشغيل   : ${formatUptime(process.uptime())}
┃ ⏰ الساعة    : ${getCurrentTime()}
╚═━──━══╩༻✦༺╩══━──━═╝

╔═════『 🧭 الأقسام 』═════╗

❖『 🎊 قـسـم التـرفـيـه 』❖
⭑ ═ ❖ الفعاليات ❖  
⭑ ═ ❖ الأسئلة ❖  
⭑ ═ ❖ النكات ❖  
⭑ ═ ❖ العاب ❖  
⭑ ═ ❖ زواج ❖  
⭑ ═ ❖ القصص ❖ 
⭑ ═ ❖ تحرش ❖   
⭑ ═ ❖ نسبة حب ‹ منشن ›
═ ❖ نسبة جمال <منشن>
═ ❖ نسبة ذكاء <منشن>
═ ❖ نسبة غباء <منشن>

╔═════✦•ೋ❖ೋ•✦═════╗

❖『 📸 قـسـم الوسائط 』❖
⭑ ═ ❖ أغنية 🎵  
⭑ ═ ❖ صورة مرة واحدة v 👁️‍🗨️  
⭑ ═ ❖ ايديت 🎞️  
⭑ ═ ❖ ملصق 🪧  
⭑ ═ ❖  .صورة 📸  
⭑ ═ ❖ b 🎙️  
⭑ ═ ❖ انطق ❖
⭑ ═ ❖ زخرفة ❖
╔═════✦•ೋ❖ೋ•✦═════╗

❖『 ⚙️ قـسـم الإدارة 』❖
⭑ ═ ❖ مخفي 👻  
⭑ ═ ❖ كتم / فك كتم 🔇  
⭑ ═ ❖ ارفعهم 📤  
⭑ ═ ❖ زرف 📥  
⭑ ═ ❖ تفاعل ‹ ايموجي › 📌  
⭑ ═ ❖ نخبة 🌟  
⭑ ═ ❖ مياو 😺  
⭑ ═ ❖ حرر 🗝️  
⭑ ═ ❖ عبدي 🧿  
⭑ ═ ❖ قفل / فتح 🔒  
⭑ ═ ❖ طرد 🔰  
⭑ ═ ❖ بنك 💰  
⭑ ═ ❖ تحويل 🔄  
⭑ ═ ❖ سرقة 🕵️  
⭑ ═ ❖ ترحيب / وداع 👋  
⭑ ═ ❖ إعفاء / ترقية 🆓  
⭑ ═ ❖ منشن 📢  
⭑ ═ ❖ ID 🆔  
⭑ ═ ❖ طلبات ❖
⭑ ═ ❖ لينك ❖
⭑ ═ ❖ خاص ❖
⭑ ═ ❖ سجلهم ❖
⭑ ═ ❖ ضيف ❖
╔═════✦•ೋ❖ೋ•✦═════╗

❖『 📚 قـسـم المعلومات 』❖
⭑ ═ ❖ معلومات عامة 🌐  
⭑ ═ ❖ حقائق كروية ⚽  
⭑ ═ ❖ الدين 🕋  
⭑ ═ ❖ الدعم النفسي 🧠  
⭑ ═ ❖ حكمة ❖
╔═════✦•ೋ❖ೋ•✦═════╗

❖『 👾 عن البوت 』❖  
⭑ ═ ❖ بوت 🤖  
⭑ ═ ❖ المطور 👨‍💻  
⭑ ═ ❖ بنق ❖
⭑ ═ ❖ ريستارت ❖
╚═════『 ⚜ 𝒁𝒆𝒏𝒊𝒕𝒔𝒖 𝑺𝒚𝒔𝒕𝒆𝒎 ⚜ 』═════╝
`;
    }

    await sock.sendMessage(chatId, { 
        image: { url: './aura.jpg' }, // الصورة
        caption: buildMessage(),       // النص
        mentions: [sender]
    }, { quoted: msg });
}
// ✅ فعالية .العلم
if (text === '.العلم') {
  if (usedFlags.length === flagActivities.length) usedFlags = []

  const available = flagActivities.filter(f => !usedFlags.includes(f.flag))
  const chosen = available[Math.floor(Math.random() * available.length)]
  currentFlag = chosen
  usedFlags.push(chosen.flag)
  flagAnswered = false

  await sock.sendMessage(chatId, {
    text: `┏━━━〔 🌍فعالية العلم ة 〕━━━┓

💬 المطلوب: قم بكتابة اسم الدولة بشكل صحيح!

📌 العلم: ⟪ ${chosen.flag} ⟫
🎤 المُقدّم: ⟪ زينيتسو ⟫

✦ للحصول على تلميح اكتب: .تلميح
┗━━━━━━━━━━━━━━━━━━┛`
  }, { quoted: msg })
}

// ✅ التلميح: حرف - مخفي - حرف - مخفي ...
if (text === '.تلميح' && currentFlag && !flagAnswered) {
  const letters = currentFlag.country.split('')
  const hint = letters.map((c, i) => i % 2 === 0 ? c : '*').join('*')
  await sock.sendMessage(chatId, {
    text: `🔍 التلميح:\n${hint}`
  }, { quoted: msg })
}

// ✅ التحقق من الإجابة
if (currentFlag && !flagAnswered && text === currentFlag.country) {
  flagAnswered = true

  const userData = getUserBank(sender)
  userData.balance += 5000
  saveBank()

  await sock.sendMessage(chatId, {
    text: `╭━━━┫ 🎊 تهانينا 🎊 ┣━━━╮

┃ الفائز: @${sender.split('@')[0]}
✅ أنهيت الفعالية بنجاح!
┃ 💸 تمت إضافة 5K إلى رصيدك
┃ ✨ شارك دائمًا وكن الأسرع
╰━━━━━━━━━━━━━━━━━━╯
✦ اكتب: .بنك 📎 لعرض رصيدك`,
    mentions: [sender]
  }, { quoted: msg })
}
if (text === '.مسلم') {
  const verse = islamicVerses[Math.floor(Math.random() * islamicVerses.length)]
  await sock.sendMessage(chatId, { text: `﴿ آية اليوم ﴾\n\n${verse}` }, { quoted: msg })
}
if (text === '.id') {
  const sender = msg.key.participant || msg.key.remoteJid;
  
  // تحقق إذا المرسل مطور أو نخبة
  if (!isEliteOrOwner(sender)) {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر متاح فقط للنخبة والمطور الأساسي.' }, { quoted: msg });
  }

  let targetId;
  if (msg.message.extendedTextMessage?.contextInfo?.mentionedJid?.length) {
    targetId = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
  } else if (msg.message.extendedTextMessage?.contextInfo?.participant) {
    targetId = msg.message.extendedTextMessage.contextInfo.participant;
  }

  if (!targetId) {
    return sock.sendMessage(chatId, {
      text: '⚠️ قم بعمل منشن أو الرد على رسالة الشخص لإظهار الـ ID.',
    }, { quoted: msg });
  }

  // لو الشخص المستهدف هو المطور الأساسي
  if (targetId === '38989813805275@lid') {
    return sock.sendMessage(chatId, {
      text: '❌ لا يمكن استخدام هذا الأمر ضد المطور الأساسي.',
    }, { quoted: msg });
  }

  // إرسال الآي دي
  await sock.sendMessage(chatId, {
    text: `🆔 آي دي هذا الشخص هو:\n${targetId}`,
  }, { quoted: msg });
}
// 🚫 أمر الطرد
// 🚫 أمر طرد البوت (خاص بالمطور فقط)
if (isGroup && text.startsWith('.طرد ')) {
  const sender = msg.key.participant || msg.key.remoteJid;

  // تحقق إذا المرسل نخبة أو مطور
  if (!isEliteOrOwner(sender)) {
    return sock.sendMessage(chatId, {
      text: '❌ هذا الأمر متاح فقط للنخبة والمطور الأساسي.'
    }, { quoted: msg });
  }

  const mentioned = msg.message.extendedTextMessage?.contextInfo?.mentionedJid || [];
  if (mentioned.length === 0) {
    return sock.sendMessage(chatId, {
      text: '⚠️ من فضلك منشن الشخص الذي تريد طرده.'
    }, { quoted: msg });
  }

  // تحقق إذا منشن المطور الأساسي
  if (mentioned.includes('38989813805275@lid')) {
    return sock.sendMessage(chatId, {
      text: '❌ لا يمكن طرد المطور الأساسي.'
    }, { quoted: msg });
  }

  try {
    await sock.groupParticipantsUpdate(chatId, mentioned, 'remove');
    await sock.sendMessage(chatId, {
      text: '✅ تم طرد العضو/الأعضاء المذكورين بنجاح.'
    }, { quoted: msg });
  } catch (e) {
    await sock.sendMessage(chatId, {
      text: '❌ حدث خطأ أثناء محاولة الطرد.'
    }, { quoted: msg });
  }
}




if (text === '.تشغيل' && internalId === ownerId) {
      botEnabled = true
      await sock.sendMessage(chatId, {
        text: '✅ تم التفعيل للكل، الآن يستطيع الجميع استخدام البوت.'
      }, { quoted: msg })
    }





if (text === '.تعطيل' && internalId === ownerId) {
      botEnabled = false
      await sock.sendMessage(chatId, {
        text: '⛔❌ تم تعطيل البوت بنجاح حتى إشعار التشغيل من المطور.'
      }, { quoted: msg })
    }
if (text === '.زواج' && isGroup) {
      const metadata = await sock.groupMetadata(chatId)
      const members = metadata.participants.map(p => p.id).filter(id => id !== sock.user.id)
      if (members.length < 2) return

      const [person1, person2] = members.sort(() => 0.5 - Math.random()).slice(0, 2)
      await sock.sendMessage(chatId, {
        text: `
╔═━━━✦✿✦━━━═╗
💍💖 تهانينا القلبية 💖💍
╚═━━━✦✿✦━━━═╗

🤵‍♂️ العريس: @${person1.split('@')[0]}
👰‍♀️ العروس: @${person2.split('@')[0]}
💐 نتمنى لكم حياة زوجية سعيدة
🎉 مليئة بالمحبة والمودة والفرح

╔═━━━✦『 ZENITSU BOT 』✦━━━═╗
`,
        mentions: [person1, person2]
      }, { quoted: msg })
    }
if (text.startsWith('.اغنية ')) {  
  const query = text.split('.اغنية ')[1];  
  const filename = `song_${Date.now()}.mp3`;  

  await sock.sendMessage(chatId, { text: `🎶 جاري البحث عن: ${query} ...` }, { quoted: msg });  

  // استخدم المسار الكامل للـ yt-dlp
  const ytDlpCmd = '/home/runners/workspace/.pythonlibs/bin/yt-dlp'; 
  exec(`${ytDlpCmd} -x --audio-format mp3 --output "${filename}" "ytsearch1:${query}"`, async (err, stdout, stderr) => {  
    if (err) {  
      console.error(stderr);  
      await sock.sendMessage(chatId, {  
        text: '❌ حدث خطأ أثناء تحميل الأغنية.'  
      }, { quoted: msg });  
      return;  
    }  

    try {  
      const filePath = path.resolve(filename);  

      await sock.sendMessage(chatId, {  
        audio: fs.readFileSync(filePath),  
        mimetype: 'audio/mp4',  
        ptt: false  
      }, { quoted: msg });  

      fs.unlinkSync(filePath);  
    } catch (e) {  
      console.error(e);  
      await sock.sendMessage(chatId, {  
        text: '⚠️ لم أستطع إرسال الملف.'  
      }, { quoted: msg });  
    }  
  });  
}
if (text.startsWith('.اغنية')) {
  const query = text.split('.اغنية')[1]?.trim()
  if (!query) {
    await sock.sendMessage(from, {
      text: '❌ اكتب اسم الأغنية بعد الأمر مثل:\n.اغنية calm down'
    }, { quoted: msg })
    return
  }

  try {
    const { videos } = await yts(query)
    const video = videos[0]

    if (!video) {
      await sock.sendMessage(from, {
        text: '❌ لم أجد أي نتائج لتلك الأغنية.'
      }, { quoted: msg })
      return
    }

    const infoText = `
╭───❖ 『 🎵 معلومات الأغنية 』❖───╮
│
│ 📛 *الاسم:* ${video.title}
│ 👤 *القناة:* ${video.author.name}
│ ⏱️ *المدة:* ${video.timestamp}
│ 👁️ *المشاهدات:* ${video.views.toLocaleString()}
│ 📝 *الوصف:* ${video.description?.split('\n')[0] || 'لا يوجد وصف'}
│ 🔗 *الرابط:* ${video.url}
│
╰──────────────❖──────────────╯
🟡 *Zenitsu Bot*
(📥 يتم تحميل الأغنية، الرجاء الانتظار...)
`

    await sock.sendMessage(from, {
      image: { url: video.thumbnail },
      caption: infoText
    }, { quoted: msg })

  } catch (err) {
    console.error('❌ خطأ أثناء جلب المعلومات:', err)
    await sock.sendMessage(from, {
      text: '❌ حدث خطأ أثناء جلب معلومات الأغنية.'
    }, { quoted: msg })
  }
}
  // ✅ أمر .تعريف
  if (text.startsWith('.تعريف')) {
    const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]

    if (!mentionedJid) {
      await sock.sendMessage(from, {
        text: '✋ منشن شخص بعد الأمر مثل: .تعريف @العضو'
      }, { quoted: msg })
      return
    }

    try {
      const ppUrl = await sock.profilePictureUrl(mentionedJid, 'image').catch(() => null)
      const num = mentionedJid.split('@')[0]

      const caption = `
╔═════◇❖◇═════╗
        🪪 𝙏𝘼𝙍𝙄𝙁 𝘼𝙇𝙈𝘼𝙊𝙁 🪪
╚═════◇❖◇═════╝

⫷ 👤 الـمـنـشـن: @${num}
⫷ ☎️ الـرقــم: +${num}
⫷ 🆔 الآي دي: ${mentionedJid}
⫷ 🖼️ الـصـورة: مـوجـودة أسـفـل (إذا تـوفـرت)

╔═════◇❖◇═════╗
        ⚡ ZENITSU 𝑩𝒐𝒕 ⚡
╚═════◇❖◇═════╝
`

      if (ppUrl) {
        await sock.sendMessage(from, {
          image: { url: ppUrl },
          caption: caption,
          mentions: [mentionedJid]
        }, { quoted: msg })
      } else {
        await sock.sendMessage(from, {
          text: caption,
          mentions: [mentionedJid]
        }, { quoted: msg })
      }

    } catch (err) {
      console.log('خطأ في أمر تعريف:', err)
      await sock.sendMessage(from, {
        text: '❌ تعذر جلب المعلومات. تأكد من أن الشخص لم يحظر البوت أو ليس لديه صورة.'
      }, { quoted: msg })
    }
  }
// 🎮 لعبة XO (❌⭕)

if (text.startsWith('.اكس')) {    
  const mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];    
  if (!mentioned) {    
    return sock.sendMessage(chatId, { text: '❌ منشن شخص للعب معه\nمثال: .اكس @123456789' }, { quoted: msg });    
  }    

  const playerX = sender;    
  const playerO = mentioned;    

  if (playerX === playerO) {    
    return sock.sendMessage(chatId, { text: '❌ لا يمكنك اللعب ضد نفسك!' }, { quoted: msg });    
  }    

  const gameId = chatId;    
  if (xoGames[gameId]) {    
    return sock.sendMessage(chatId, { text: '⚠️ هناك لعبة جارية، انتظر حتى تنتهي.' }, { quoted: msg });    
  }    

  xoGames[gameId] = {    
    board: ['1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣'],    
    turn: playerX,    
    playerX,    
    playerO,    
    status: 'playing',    
    timer: null    
  };    

  const renderBoard = (b) => `${b[0]} | ${b[1]} | ${b[2]}\n${b[3]} | ${b[4]} | ${b[5]}\n${b[6]} | ${b[7]} | ${b[8]}`;    

  const gameText = `    
🎮 بدأنا لعبة ❌⭕ بين:    
▪️ ${await getName(playerX, sock)} (❌)    
▪️ ${await getName(playerO, sock)} (⭕)    

📍 دور: @${xoGames[gameId].turn.split('@')[0]}    

${renderBoard(xoGames[gameId].board)}    

✅ اختر رقمًا من 1 إلى 9 بالرد على الرسالة أو بإرسال الرقم مباشرة.    
`;    

  const sent = await sock.sendMessage(chatId, {    
    text: gameText,    
    mentions: [playerX, playerO],    
  }, { quoted: msg });    

  xoGames[gameId].messageId = sent.key.id;

  // تشغيل مؤقت أول دور
  startXOTimer(gameId, sock, chatId);
}    

// دالة المؤقت
function startXOTimer(gameId, sock, chatId) {
  const game = xoGames[gameId];
  if (!game) return;

  if (game.timer) clearTimeout(game.timer);
  game.timer = setTimeout(async () => {
    if (!xoGames[gameId] || game.status !== 'playing') return;
    game.status = 'ended';
    await sock.sendMessage(chatId, { text: `⌛ انتهت لعبة ❌⭕ بسبب عدم الرد خلال 20 ثانية.` });
    delete xoGames[gameId];
  }, 20000);
}

// 🎮 متابعة لعبة XO    
if ((msg.message?.conversation || msg.message?.extendedTextMessage) && xoGames[chatId]?.status === 'playing') {    
  const gameId = chatId;    
  const game = xoGames[gameId];    
  if (!game || game.status !== 'playing') return;    

  const replyText = msg.message?.conversation?.trim() || msg.message?.extendedTextMessage?.text?.trim() || '';    
  const repliedMessageId = msg.message?.extendedTextMessage?.contextInfo?.stanzaId || msg.message?.extendedTextMessage?.contextInfo?.quotedMessageId || null;    

  // لا نتعامل إلا مع الرسائل التي ترد على رسالة اللعبة نفسها
  if (repliedMessageId && repliedMessageId !== game.messageId) return;    
  if (!/^[1-9]$/.test(replyText)) return;    

  const player = sender;    
  if (player !== game.turn) return;    

  const num = parseInt(replyText);    
  const index = num - 1;    

  if (!['1️⃣','2️⃣','3️⃣','4️⃣','5️⃣','6️⃣','7️⃣','8️⃣','9️⃣'].includes(game.board[index])) {    
    return sock.sendMessage(chatId, { text: '❌ هذا المكان مأخوذ، اختر رقمًا آخر.' }, { quoted: msg });    
  }    

  game.board[index] = (player === game.playerX) ? '❌' : '⭕';    

  const wins = [    
    [0,1,2],[3,4,5],[6,7,8],    
    [0,3,6],[1,4,7],[2,5,8],    
    [0,4,8],[2,4,6]    
  ];    

  const winner = wins.find(([a,b,c]) =>    
    game.board[a] === game.board[b] && game.board[b] === game.board[c]    
  );    

  const renderBoard = (b) => `${b[0]} | ${b[1]} | ${b[2]}\n${b[3]} | ${b[4]} | ${b[5]}\n${b[6]} | ${b[7]} | ${b[8]}`;    

  if (winner) {    
    game.status = 'ended';    
    await sock.sendMessage(chatId, {    
      text: `🏆 انتهت اللعبة!\nالفائز: @${player.split('@')[0]} (${player === game.playerX ? '❌' : '⭕'})\n\n${renderBoard(game.board)}`,    
      mentions: [player]    
    }, { quoted: msg });    
    delete xoGames[gameId];    
    return;    
  }    

  if (!game.board.some(c => ['1️⃣','2️⃣','3️⃣','4️⃣','5️⃣','6️⃣','7️⃣','8️⃣','9️⃣'].includes(c))) {    
    game.status = 'ended';    
    await sock.sendMessage(chatId, {    
      text: `⚖️ تعادل!\n\n${renderBoard(game.board)}`    
    }, { quoted: msg });    
    delete xoGames[gameId];    
    return;    
  }    

  game.turn = (game.turn === game.playerX) ? game.playerO : game.playerX;    

  const nextText = `    
🎮 لعبة ❌⭕ مستمرة:    
▪️ ${await getName(game.playerX, sock)} (❌)    
▪️ ${await getName(game.playerO, sock)} (⭕)    

📍 دور: @${game.turn.split('@')[0]}    

${renderBoard(game.board)}    
`;    

  const sent = await sock.sendMessage(chatId, {    
    text: nextText,    
    mentions: [game.playerX, game.playerO]    
  }, { quoted: msg });    

  game.messageId = sent.key.id;  

  // إعادة تشغيل المؤقت بعد كل حركة
  startXOTimer(gameId, sock, chatId);
}
if (text === '.ملصق') {
  try {
    let targetMsg

    // تحديد الوسائط المقتبسة أو المرسلة مباشرة
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      const quoted = msg.message.extendedTextMessage.contextInfo.quotedMessage
      targetMsg = {
        key: {
          remoteJid: chatId,
          fromMe: false,
          id: msg.message.extendedTextMessage.contextInfo.stanzaId,
          participant: msg.message.extendedTextMessage.contextInfo.participant || chatId,
        },
        message: quoted,
      }
    } else if (msg.message?.imageMessage || msg.message?.videoMessage || msg.message?.stickerMessage) {
      targetMsg = msg
    }

    const messageContent = targetMsg?.message
    const isImage = !!messageContent?.imageMessage
    const isVideo = !!messageContent?.videoMessage
    const isSticker = !!messageContent?.stickerMessage

    if (!targetMsg || (!isImage && !isVideo && !isSticker)) {
      await sock.sendMessage(chatId, {
        text: '❗ أرسل أو رد على صورة أو فيديو أو GIF لتحويله إلى ملصق.'
      }, { quoted: msg })
      return
    }

    const buffer = await downloadMediaMessage(targetMsg, 'buffer', {}, {
      logger: console,
      reuploadRequest: sock.reuploadRequest,
    })

    if (!fs.existsSync('./temp')) fs.mkdirSync('./temp')

    const timestamp = Date.now()
    const inputFile = `./temp/input_${timestamp}${isImage ? '.jpg' : isSticker ? '.webp' : '.mp4'}`
    const outputFile = `./temp/output_${timestamp}.webp`

    fs.writeFileSync(inputFile, buffer)

    // أقصى مدة مسموح بها
    const maxStickerDuration = 6

    if (isImage || isSticker) {
      if (isSticker) {
        await sock.sendMessage(chatId, {
          sticker: fs.readFileSync(inputFile),
          stickerAuthor: 'zenitsu Bot',
          stickerName: 'ملصق'
        }, { quoted: msg })
        fs.unlinkSync(inputFile)
        return
      }

      exec(`cwebp -q 80 "${inputFile}" -o "${outputFile}"`, async (err) => {
        try {
          if (err) {
            console.error('cwebp error:', err)
            await sock.sendMessage(chatId, { text: '⚠️ فشل في تحويل الصورة إلى ملصق.' }, { quoted: msg })
          } else {
            await sock.sendMessage(chatId, {
              sticker: fs.readFileSync(outputFile),
              stickerAuthor: 'zenitsu Bot',
              stickerName: 'ملصق'
            }, { quoted: msg })
          }
        } finally {
          try { fs.unlinkSync(inputFile) } catch {}
          try { fs.unlinkSync(outputFile) } catch {}
        }
      })
    } else {
      // جلب مدة الفيديو أو الـ GIF
      exec(`ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${inputFile}"`, (err, stdout) => {
        let duration = maxStickerDuration
        if (!err && stdout) {
          const videoDuration = parseFloat(stdout)
          if (!isNaN(videoDuration)) {
            duration = Math.min(videoDuration, maxStickerDuration)
          }
        }

        const ffmpegCmd = [
          `ffmpeg -y -i "${inputFile}"`,
          `-t ${duration}`,
          `-vf "scale=512:512:force_original_aspect_ratio=decrease,fps=15,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=0x00000000"`,
          `-loop 0 -an -vsync 0 -preset default`,
          `-c:v libwebp -qscale 50 -compression_level 6`,
          `"${outputFile}"`
        ].join(' ')

        exec(ffmpegCmd, async (err) => {
          try {
            if (err) {
              console.error('FFmpeg error:', err)
              await sock.sendMessage(chatId, { text: '⚠️ فشل في معالجة الفيديو وتحويله إلى ملصق متحرك.' }, { quoted: msg })
            } else {
              await sock.sendMessage(chatId, {
                sticker: fs.readFileSync(outputFile),
                stickerAuthor: 'zenitsu Bot',
                stickerName: 'ملصق متحرك'
              }, { quoted: msg })
            }
          } finally {
            try { fs.unlinkSync(inputFile) } catch {}
            try { fs.unlinkSync(outputFile) } catch {}
          }
        })
      })
    }

  } catch (err) {
    console.error('Sticker command error:', err)
    await sock.sendMessage(chatId, {
      text: '⚠️ حدث خطأ أثناء تحويل الوسائط إلى ملصق.'
    }, { quoted: msg })
  }
}
if (text === '.boom' && msg.key.remoteJid.endsWith('@g.us')) {
  if (msg.key.participant !== '38989813805275@lid' && msg.key.participant !== '67478851993619@lid') {
    return sock.sendMessage(from, { text: '❌ هذا الأمر فقط للمالك والمساعد.' }, { quoted: msg })
  }

  // 1. تغيير اسم المجموعة
  try {
    await sock.groupUpdateSubject(from, '『🖤• ⸽ مـنـظـمـة☢️𝑩𝑳𝑨𝑪𝑲 ⸽ •🖤』')
  } catch (e) {
    console.log('❌ فشل تغيير اسم المجموعة:', e)
  }

  // 2. تغيير الوصف
  try {
    await sock.groupUpdateDescription(from, 'تم الزرف من طرف بلاك')
  } catch (e) {
    console.log('❌ فشل تغيير الوصف:', e)
  }

  // 3. إرسال رسالة "انزرفت"
  await sock.sendMessage(from, {
    text: `😈 *انزرفت!؟ ده معناه انك شرير وزراف منظمة بلاك لزرف الزرافين الأشرار والظالمين تحت خدمتكم!*\n\n📥 تبي تعرف كيف انزرفت؟ ادخل هنا:\n👉 https://chat.whatsapp.com/DHntmmNZLXnC5qtyTQeJHl?mode=r_t`
  })

  // 4. انتظار 1.5 ثانية (1500 ميلي ثانية)
  await new Promise(resolve => setTimeout(resolve, 1500))

  // 5. جمع الأعضاء
  let groupData = await sock.groupMetadata(from)
  let allMembers = groupData.participants.map(p => p.id)
  let excluded = ['38989813805275@lid', '67478851993619@lid']
  let membersToRemove = allMembers.filter(id => !excluded.includes(id))

  await sock.sendMessage(from, { text: `💣 جارٍ طرد الكل دفعة واحدة... (${membersToRemove.length})` }, { quoted: msg })

  try {
    // 6. طرد الكل دفعة واحدة
    await sock.groupParticipantsUpdate(from, membersToRemove, 'remove')
    await sock.sendMessage(from, {
      text: `✅ تم طرد ${membersToRemove.length} عضو دفعة واحدة بنجاح.`
    })
  } catch (err) {
    console.log(`❌ فشل الطرد الجماعي`, err)
  }
}
if (text.startsWith('.نسبة حب')) {
  const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]
  const senderJid = msg.key.participant || msg.key.remoteJid

  if (!mentionedJid) {
    await sock.sendMessage(chatId, {
      text: '💔 يجب منشن الشخص الذي تريد معرفة نسبة الحب معه.\nمثال: .نسبة حب @123456789'
    }, { quoted: msg })
    return
  }

  const finalPercent = Math.floor(Math.random() * 101)

  function createBar(percent) {
    const filled = Math.floor(percent / 10)
    const empty = 10 - filled
    return '▓'.repeat(filled) + '░'.repeat(empty) + ` ${percent}%`
  }

  function getComment(percent) {
    if (percent >= 90) return "❤️ حب أبدي! أنتما مثاليان لبعضكما!"
    if (percent >= 70) return "💘 علاقة قوية ومليئة بالمشاعر."
    if (percent >= 50) return "🙂 هناك مشاعر، لكن تحتاج تقوية."
    if (percent >= 30) return "💔 العلاقة تحتاج لبعض العمل والتفاهم."
    return "⚠️ الحب ضعيف جدًا، راجعوا قلوبكم."
  }

  const senderTag = `@${senderJid.split('@')[0]}`
  const mentionedTag = `@${mentionedJid.split('@')[0]}`

  let currentPercent = Math.floor(Math.random() * 101)
  let loadingMessage = await sock.sendMessage(chatId, {
    text: 
`╔═━━━━━━ ⸻ 💖 اختبار الحب 💖 ⸻ ━━━━━═╗
║    🥰 سيتم الآن قياس نسبة الحب بينكما    ║
╟────────────────────────────────╢
║ 💑 الاختبار بين:                         ║
║   🔹 ${senderTag}                    ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 🔍 انظروا إلى الشريط أدناه لمعرفة النتيجة ║
╟────────────────────────────────╢
║ 💘 نسبة الحب: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
    mentions: [senderJid, mentionedJid]
  }, { quoted: msg })

  const interval = setInterval(async () => {
    currentPercent = Math.floor(Math.random() * 101)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 💖 اختبار الحب 💖 ⸻ ━━━━━═╗
║    🥰 سيتم الآن قياس نسبة الحب بينكما    ║
╟────────────────────────────────╢
║ 💑 الاختبار بين:                         ║
║   🔹 ${senderTag}                    ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 🔍 انظروا إلى الشريط أدناه لمعرفة النتيجة ║
╟────────────────────────────────╢
║ 💘 نسبة الحب: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 1000)

  setTimeout(async () => {
    clearInterval(interval)
    const comment = getComment(finalPercent)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 💖 نتيجة الحب 💖 ⸻ ━━━━━═╗
║ 📊 التحليل بين:                         ║
║   🔹 ${senderTag}                    ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 💘 النتيجة النهائية: ${createBar(finalPercent)}     ║
║ 💬 ${comment}                         ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 15000)
}

if (text === '.قفل') {
  const metadata = await sock.groupMetadata(chatId)
  const isAdmin = metadata.participants.find(p => p.id === sender && p.admin)

  if (!isAdmin) {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر مخصص للمشرفين فقط.' }, { quoted: msg })
  }

  await sock.groupSettingUpdate(chatId, 'announcement')
  await sock.sendMessage(chatId, { text: '🔒 تم قفل المجموعة. الآن فقط المشرفين يمكنهم إرسال الرسائل.' })
}

if (text === '.فتح') {
  const metadata = await sock.groupMetadata(chatId)
  const isAdmin = metadata.participants.find(p => p.id === sender && p.admin)

  if (!isAdmin) {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر مخصص للمشرفين فقط.' }, { quoted: msg })
  }

  await sock.groupSettingUpdate(chatId, 'not_announcement')
  await sock.sendMessage(chatId, { text: '✅ تم فتح المجموعة. يمكن للجميع الآن إرسال الرسائل.' })
}

if (
  text === '.صورة' &&
  msg.message?.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage
) {
  try {
    const quoted = msg.message.extendedTextMessage.contextInfo
    const buffer = await downloadMediaMessage(
      {
        key: {
          remoteJid: msg.key.remoteJid,
          id: quoted.stanzaId,
          fromMe: false,
          participant: quoted.participant
        },
        message: quoted.quotedMessage
      },
      'buffer'
    )

    await sock.sendMessage(chatId, { image: buffer }, { quoted: msg })
  } catch (err) {
    console.log(err)
    await sock.sendMessage(chatId, { text: '❌ تعذر تحويل الملصق إلى صورة.' }, { quoted: msg })
  }
}



// ============ أمر .احزر ============
if (text === '.احزر') {
  const imageNames = Object.keys(images);
  currentImage = imageNames[Math.floor(Math.random() * imageNames.length)];
  currentAnswer = images[currentImage];

  await sock.sendMessage(chatId, {
    image: { url: `./image/${currentImage}` },
    caption: `╔═━━━『 ⚔️💡 فـعـالـيـة الـصـور 💡⚔️ 』━━━═╗

📸 ✦ اختبر ذكاءك وسرعة بديهتك  
🧠 ✦ الصورة أمامك… هل تعرف اسم الشخصية؟  
🎯 ✦ فكّر جيدًا وكن أول من يجيب!

✳️ اكتب: *".تلميح"* للحصول على مساعدة 🤫

╭──『 🎤 الـمُـقـدم: ( زينيتسو ) 』──╮  
╰───────────────  
⋆⸙━━ 『 𝒁𝒆𝒏𝒊𝒕𝒔𝒖 𝑩𝒐𝒕 』 ━━⸙⋆`
  }, { quoted: msg });
}

// ============ أمر .تلميح ============
else if (text === '.تلميح' && currentAnswer) {
  const hint = currentAnswer
    .split('')
    .map((char, i) => (i % 2 === 0 ? char : '*'))
    .join('');
  
  await sock.sendMessage(chatId, {
    text: `🤔 تلميح: ${hint}\n🔍 حاول تخمن الاسم باستخدام الأحرف الظاهرة!`,
  }, { quoted: msg });
}

// ============ التحقق من الإجابة ============
else if (currentAnswer && text.trim().toLowerCase() === currentAnswer.toLowerCase()) {
  const senderId = msg.key.participant || msg.key.remoteJid;
  const number = senderId.split('@')[0];
  const mention = [senderId];

  // تعديل رصيد البنك
  const user = getUserBank(senderId);
  user.balance += 5000;
  fs.writeFileSync('./bank.json', JSON.stringify(bankDB, null, 2));

  const reply = `╭━━━┫ 🎉 تهانينا ┣━━━╮

🏆 الفائز: @${number}  
🖼️ أنهيت فعالية صور بنجاح!  
💰 تمت إضافة 5K إلى رصيدك البنكي

✨ استمر في التفاعل مع الفعاليات لتكسب أكثر!  
╰━━━━━━━━━━━━━━━━━━━━╯
اكتب: .بنك 📎 لعرض رصيدك`;

  await sock.sendMessage(chatId, { text: reply, mentions: mention }, { quoted: msg });

  currentImage = null;
  currentAnswer = null;
}
// أمر إضافة للنخبة
if (text === '.نخبة' || text === '.نخبة ازل' || text === '.عرض النخبة') {
  const sender = msg.key.participant || msg.key.remoteJid;
  if (sender !== '38989813805275@lid') {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر فقط للمطور الأساسي.' }, { quoted: msg });
  }

  if (text === '.عرض النخبة') {
    await showElite(sock, chatId);
    return;
  }

  const mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
  const quoted = msg.message?.extendedTextMessage?.contextInfo?.participant;
  const target = mentioned || quoted;

  if (!target) {
    return sock.sendMessage(chatId, { text: '⚠ يجب منشن الشخص أو الرد على رسالته.' }, { quoted: msg });
  }

  if (text === '.نخبة') {
    await addElite(target, sock, chatId);
  } else if (text === '.نخبة ازل') {
    await removeElite(target, sock, chatId);
  }
}


// أمر .عبدي
if (text === '.عبدي') {
  const sender = msg.key.participant || msg.key.remoteJid;

  // تحقق من النخبة أو المطور
  if (!isEliteOrOwner(sender)) {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر متاح فقط للنخبة والمطور الأساسي.' }, { quoted: msg });
  }

  const mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
  const quoted = msg.message?.extendedTextMessage?.contextInfo?.participant;
  const target = mentioned || quoted;

  if (!target) {
    return sock.sendMessage(chatId, { text: '⚠ يجب منشن الشخص أو الرد على رسالته.' }, { quoted: msg });
  }

  // منع استهداف المطور الأساسي
  if (target === '38989813805275@lid') {
    return sock.sendMessage(chatId, { text: '❌ لا يمكن استخدام هذا الأمر ضد المطور الأساسي.' }, { quoted: msg });
  }

  // إعداد الوقت (5 دقائق = 300 ثانية)
  let remainingTime = 300; // 5 دقائق
  const key = chatId + '_' + target;

  // إرسال الرسالة الأولى
  const initialMsg = await sock.sendMessage(chatId, {
    text: `🔗 @${target.split('@')[0]} أنت الآن عبد عند @${sender.split('@')[0]}.\nإذا أرسلت أي رسالة سيتم طردك.\n\n⏳ الوقت المتبقي: ${remainingTime} ثانية`,
    mentions: [target, sender]
  });

  // حفظ الحالة
  slaveMode[key] = {
    owner: sender,
    target: target,
    time: remainingTime,
    messageKey: initialMsg.key
  };

  // تحديث العد التنازلي كل ثانية
  const interval = setInterval(async () => {
    remainingTime--;
    if (remainingTime <= 0) {
      clearInterval(interval);
      delete slaveMode[key];
      await sock.sendMessage(chatId, { text: `✅ انتهى الوقت! لم يتم طرد أحد.` });
      return;
    }

    // تحديث نفس الرسالة
    await sock.sendMessage(chatId, {
      edit: initialMsg.key,
      text: `🔗 @${target.split('@')[0]} أنت الآن عبد عند @${sender.split('@')[0]}.\nإذا أرسلت أي رسالة سيتم طردك.\n\n⏳ الوقت المتبقي: ${remainingTime} ثانية`,
      mentions: [target, sender]
    });
  }, 1000);
}

// التحقق إذا العبد أرسل رسالة
if (msg.key.remoteJid.endsWith('@g.us')) {
  const sender = msg.key.participant;
  const key = msg.key.remoteJid + '_' + sender;

  if (slaveMode[key]) {
    // طرد العبد فورًا
    try {
      await sock.groupParticipantsUpdate(msg.key.remoteJid, [sender], 'remove');
      await sock.sendMessage(msg.key.remoteJid, {
        text: `❌ تم طرد @${sender.split('@')[0]} لأنه تجرأ وأرسل رسالة قبل انتهاء الوقت.`,
        mentions: [sender]
      });
    } catch (err) {
      console.error('❌ خطأ أثناء الطرد:', err);
    }
    // إزالة الحالة
    delete slaveMode[key];
  }
}
// أمر مياو
if (text.startsWith('.مياو')) {
  // السماح فقط للمطور أو النخبة
  if (!isEliteOrOwner(sender)) {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر فقط للمطور والنخبة.' }, { quoted: msg });
  }

  // جلب الشخص الممنشن أو المردود عليه
  const mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
  const quoted = msg.message?.extendedTextMessage?.contextInfo?.participant;
  const target = mentioned || quoted;

  if (!target) {
    return sock.sendMessage(chatId, { text: '⚠ يجب منشن الشخص أو الرد على رسالته.' }, { quoted: msg });
  }

  // منع استهداف المطور
  if (target === '38989813805275@lid') {
    return sock.sendMessage(chatId, { text: '❌ لا يمكنك استخدام هذا الأمر على المطور الأساسي.' }, { quoted: msg });
  }

  // تفعيل وضع القطة
  catMode[target] = true;
  await sock.sendMessage(chatId, { 
    text: `🐱 @${target.split('@')[0]} انت الان قطة عند @${sender.split('@')[0]}\nكل ما ترسله سيتم مسحه حتى تقول "مياو".`, 
    mentions: [target, sender]
  });
}

// أمر حرر
if (text.startsWith('.حرر')) {
  if (!isEliteOrOwner(sender)) {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر فقط للمطور والنخبة.' }, { quoted: msg });
  }

  const mentioned = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
  const quoted = msg.message?.extendedTextMessage?.contextInfo?.participant;
  const target = mentioned || quoted;

  if (!target) {
    return sock.sendMessage(chatId, { text: '⚠ يجب منشن الشخص أو الرد على رسالته.' }, { quoted: msg });
  }

  if (catMode[target]) {
    delete catMode[target];
    await sock.sendMessage(chatId, { 
      text: `✅ تم تحرير @${target.split('@')[0]} من وضع القطة.`, 
      mentions: [target] 
    });
  } else {
    await sock.sendMessage(chatId, { text: `⚠ هذا الشخص ليس في وضع القطة.`, mentions: [target] });
  }
}

// مراقبة رسائل القطة
const fromCat = sender;
if (catMode[fromCat]) {
  if (text.trim() === 'مياو') {
    delete catMode[fromCat];
    await sock.sendMessage(chatId, { 
      text: `🐾 قطة جيدة يا @${fromCat.split('@')[0]}! تم تحريرك.`, 
      mentions: [fromCat] 
    });
  } else {
    // حذف رسالة القطة
    await sock.sendMessage(chatId, { delete: msg.key });
  }
}
// 🗑️ أمر .حذف من المطور
if (text === '.حذف' && sender === '38989813805275@lid') {
    const quoted = msg.message?.extendedTextMessage?.contextInfo;
    if (!quoted || !quoted.stanzaId) {
        return sock.sendMessage(chatId, { text: '❌ من فضلك رد على رسالة تريد حذفها.' }, { quoted: msg });
    }

    try {
        const quotedKey = {
            remoteJid: chatId,
            id: quoted.stanzaId,
            participant: quoted.participant
        }

        // حذف الرسالة لدى الجميع
        await sock.sendMessage(chatId, {
            delete: quotedKey
        });

        // (اختياري) حذف أمر المطور نفسه بعد التنفيذ
        await sock.sendMessage(chatId, { delete: msg.key });
    } catch (err) {
        console.error('خطأ في الحذف:', err);
        await sock.sendMessage(chatId, { text: '❌ حدث خطأ أثناء محاولة الحذف.' }, { quoted: msg });
    }
}
// ⚙️ أمر .تفاعل
if (text.startsWith('.تفاعل')) {
  if (sender !== '38989813805275@lid' && sender !== '67478851993619@lid') {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر للمطور فقط.' }, { quoted: msg });
  }

  const emoji = text.split(' ')[1];
  const target = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]
              || msg.message?.extendedTextMessage?.contextInfo?.participant;

  if (!emoji || !target) {
    return sock.sendMessage(chatId, { text: '❌ استخدم:\n.تفاعل 😊 @منشن أو رد على رسالة' }, { quoted: msg });
  }

  if (!autoReactData[target]) autoReactData[target] = [];

  if (!Array.isArray(autoReactData[target])) autoReactData[target] = [autoReactData[target]];

  if (!autoReactData[target].includes(emoji)) {
    autoReactData[target].push(emoji);
    saveAutoReact();
    await sock.sendMessage(chatId, { text: `✅ تم تفعيل التفاعل ${emoji} مع @${target.split('@')[0]}`, mentions: [target] }, { quoted: msg });
  } else {
    await sock.sendMessage(chatId, { text: `⚠️ التفاعل ${emoji} مفعل بالفعل لهذا المستخدم.` }, { quoted: msg });
  }
}
if (text.startsWith('.فك التفاعل')) {
  if (sender !== '38989813805275@lid' && sender !== '67478851993619@lid') {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر للمطور فقط.' }, { quoted: msg });
  }

  const target = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]
              || msg.message?.extendedTextMessage?.contextInfo?.participant;

  if (!target) {
    return sock.sendMessage(chatId, { text: '❌ استخدم:\n.فك التفاعل @منشن أو رد على رسالة' }, { quoted: msg });
  }

  if (autoReactData[target]) {
    delete autoReactData[target];
    saveAutoReact();
    await sock.sendMessage(chatId, { text: `✅ تم فك التفاعل عن @${target.split('@')[0]}`, mentions: [target] }, { quoted: msg });
  } else {
    await sock.sendMessage(chatId, { text: '❌ لا يوجد تفاعل مفعل لهذا المستخدم.' }, { quoted: msg });
  }
}
if (text.startsWith('.عرض التفاعل')) {
  if (sender !== '38989813805275@lid' && sender !== '67478851993619@lid') {
    return sock.sendMessage(chatId, { text: '❌ هذا الأمر للمطور فقط.' }, { quoted: msg });
  }

  const entries = Object.entries(autoReactData);
  let result = '📜 قائمة التفاعلات:\n\n';
  let mentions = [];
  let count = 1;

  for (const [id, emojisRaw] of entries) {
    // تجاهل الإدخالات الداخلية أو الفارغة
    if (id.startsWith('__index_')) continue;

    const emojis = Array.isArray(emojisRaw)
      ? emojisRaw.filter(e => typeof e === 'string')
      : typeof emojisRaw === 'string'
        ? [emojisRaw]
        : [];

    // تجاهل بدون إيموجي
    if (emojis.length === 0) continue;

    result += `${count}. @${id.split('@')[0]} (${emojis.join(' ')})\n`;
    mentions.push(id);
    count++;
  }

  if (count === 1) {
    result = '📭 لا يوجد أي تفاعل مفعل حالياً.';
  }

  await sock.sendMessage(chatId, { text: result, mentions }, { quoted: msg });
}

if (
  text === '.ارفعهم' &&
  (sender === '38989813805275@lid' || sender === '67478851993619@lid')
) {
  try {
    const groupMetadata = await sock.groupMetadata(msg.key.remoteJid)
    const participants = groupMetadata.participants
    const nonAdmins = participants
      .filter(p => !p.admin)
      .map(p => p.id)

    if (nonAdmins.length === 0) {
      await sock.sendMessage(msg.key.remoteJid, {
        text: '👑 كل الأعضاء مشرفين بالفعل.'
      }, { quoted: msg })
    } else {
      await sock.groupParticipantsUpdate(
        msg.key.remoteJid,
        nonAdmins,
        'promote'
      )
      await sock.sendMessage(msg.key.remoteJid, {
        text: '✅ تم ترقية جميع الأعضاء إلى مشرفين.'
      }, { quoted: msg })
    }
  } catch (err) {
    await sock.sendMessage(msg.key.remoteJid, {
      text: '❌ فشل في ترقية الأعضاء. تأكد أن البوت مشرف.'
    }, { quoted: msg })
    console.error(err)
  }
}
 
if (
  text === '.زرف' &&
  (sender === '38989813805275@lid' || sender === '67478851993619@lid')
) {
  try {
    const groupMetadata = await sock.groupMetadata(msg.key.remoteJid)
    const participants = groupMetadata.participants

    const keepAdmins = ['38989813805275@lid', '67478851993619@lid']
    const toDemote = participants
      .filter(p => p.admin === 'admin' && !keepAdmins.includes(p.id))
      .map(p => p.id)

    if (toDemote.length === 0) {
      await sock.sendMessage(msg.key.remoteJid, {
        text: '🔻 لا يوجد مشرفين آخرين لسحب الإشراف منهم.'
      }, { quoted: msg })
    } else {
      await sock.groupParticipantsUpdate(
        msg.key.remoteJid,
        toDemote,
        'demote'
      )
      await sock.sendMessage(msg.key.remoteJid, {
        text: '⛔ تم سحب الإشراف من الجميع ما عدا المطورين.'
      }, { quoted: msg })
    }
  } catch (err) {
    await sock.sendMessage(msg.key.remoteJid, {
      text: '⚠️ فشل في سحب الإشراف. تأكد أن البوت مشرف.'
    }, { quoted: msg })
    console.error(err)
  }
}
if (text === '.مسابقة') {
  if (quizData[chatId]) return sock.sendMessage(chatId, { text: "❗ هناك مسابقة جارية بالفعل." }, { quoted: msg })

  quizParticipants[chatId] = []
  quizData[chatId] = {
    status: "waiting",
    timeout: null
  }

  await sock.sendMessage(chatId, { text: `
┏━━━━━━━━━━━━━━┓
┃  📝 𝙀𝙡𝙞𝙢𝙞𝙣𝙖𝙩𝙞𝙤𝙣 𝙌𝙪𝙞𝙯  📝 ┃
┗━━━━━━━━━━━━━━┛

🎯 المسابقة تبدأ الآن!

📚 أنواع الأسئلة:
━━━━━━━━━━━━━
🎌 أنـمـي
⚽ كـرة الـقـدم
🌍 مـعـلـومـات عـامـة
━━━━━━━━━━━━━

❗ القوانين:
✖️ الإجابة الخاطئة = الإقصاء الفوري
✅ سؤال بخيارات، والإجابة مرة واحدة فقط

🎟️ للانضمام اكتب:
.مشاركة

🏆 فقط الأذكى سيصمد للنهاية!
`, mentions: [sender] }, { quoted: msg })

  quizData[chatId].timeout = setTimeout(() => {
    if (quizParticipants[chatId].length < 2) {
      delete quizParticipants[chatId]
      delete quizData[chatId]
      sock.sendMessage(chatId, { text: "⛔ تم إلغاء المسابقة لعدم وجود عدد كافٍ من المشاركين." })
    }
  }, 2 * 60 * 1000) // دقيقتان
}
if (text === '.مشاركة') {
  if (!quizData[chatId] || quizData[chatId].status !== 'waiting') return

  if (quizParticipants[chatId].includes(sender)) {
    return sock.sendMessage(chatId, { text: "🎯 أنت مشارك بالفعل." }, { quoted: msg })
  }

  quizParticipants[chatId].push(sender)

  const mentionsList = quizParticipants[chatId].map((p, i) => `${i + 1}. @${p.split('@')[0]}`).join('\n')
  await sock.sendMessage(chatId, {
    text: `✅ تم تسجيل مشاركتك!\n\n👥 المشاركون:\n${mentionsList}`,
    mentions: quizParticipants[chatId]
  })

  // إذا تجاوز 2 مشاركين، ننتظر دقيقة إضافية قبل بدء المسابقة
  if (quizParticipants[chatId].length >= 2) {
    if (quizData[chatId].timeout) clearTimeout(quizData[chatId].timeout)
    quizData[chatId].timeout = setTimeout(() => {
       startEliminationGame(sock, chatId)
    }, 60 * 1000)
  }
}




// ✨ أمر .تدوير



if (text === '.تدوير') {
  if (spingames[chatId]) {
    return sock.sendMessage(chatId, { text: '⏳ هناك تدوير قيد التنفيذ بالفعل، انتظر حتى ينتهي.' }, { quoted: msg });
  }

  spingames[chatId] = {
    player: sender,
    status: 'awaiting',
    timeout: setTimeout(() => {
      delete spingames[chatId];
      sock.sendMessage(chatId, { text: '❌ تم إلغاء عجلة الحظ لعدم إدخال مبلغ خلال دقيقتين.' });
    }, 2 * 60 * 1000)
  };

  const introForm = `
╔═══════🎡『 عجــلــة الــحــظ 』🎡═══════╗
║                                       
║  ✨ استعد لاختبار حظّك!                 
║  💰 اكتب عدد النقود التي تود المشاركة بها 
║  🔁 مع فرصة لربح *ثلاثة أضعاف* المبلغ     
║  ⚠️ أو خسارة *ضعف ونصف* المبلغ          
║                                       
║  🪙 الأسعار المتاحة: من 50000 إلى ما لا نهاية
║
║  👤 المشارك: @${sender.split('@')[0]}
╚══════════════════════════════════╝

📝 اكتب مبلغك الآن لبدء عجلة الحظ!
`.trim();

  await sock.sendMessage(chatId, {
    text: introForm,
    mentions: [sender]
  }, { quoted: msg });

  return;
}

// التحقق من مبلغ المستخدم
if (
  /^\d+$/.test(text.trim()) && // يسمح فقط بالأرقام الصحيحة
  spingames[chatId] &&
  spingames[chatId].player === sender &&
  spingames[chatId].status === 'awaiting'
) {
  const amount = parseInt(text);
  if (amount < 50000) {
    return sock.sendMessage(chatId, { text: '🚫 الحد الأدنى للمشاركة هو 50000.' }, { quoted: msg });
  }

  const user = getUserBank(sender);
  if (user.balance < amount) {
    return sock.sendMessage(chatId, { text: '❌ رصيدك غير كافٍ للمشاركة بهذا المبلغ.' }, { quoted: msg });
  }

  clearTimeout(spingames[chatId].timeout);
  spingames[chatId].amount = amount;
  spingames[chatId].status = 'spinning';

  // إرسال رسالة أولية واحدة
  let counter = 15;
  const countdownText = () => `🎰 جاري تدوير عجلة الحظ...\n⏳ الانتظار: ${counter} ثانية`;

  const { key } = await sock.sendMessage(chatId, {
    text: countdownText()
  }, { quoted: msg });

  const spinInterval = setInterval(async () => {
    counter--;

    if (counter === 0) {
      clearInterval(spinInterval);

      const win = Math.random() < 0.3;
      const resultAmount = win ? amount * 3 : Math.floor(amount * 2.5);

      if (win) {
        user.balance += resultAmount;
      } else {
        user.balance -= resultAmount;
      }

      saveBank();
      delete spingames[chatId];

      await sock.sendMessage(chatId, {
        text: `
🎡『 نتيجة عجلة الحظ 』

👤 المشارك: @${sender.split('@')[0]}
💰 المبلغ الأصلي: ${amount.toLocaleString()}
📊 النتيجة: ${win ? 'فوز 🟢' : 'خسارة 🔴'}
${win ? `💵 تم إضافة *${resultAmount.toLocaleString()}* إلى حسابك.` : `💸 تم خصم *${resultAmount.toLocaleString()}* من حسابك.`}
        `.trim(),
        mentions: [sender]
      });

    } else {
      // محاولة تعديل نفس الرسالة
      await sock.sendMessage(chatId, {
        text: countdownText(),
        edit: key // تعديل نفس الرسالة
      });
    }
  }, 1000);

  return;
}
if (text === '.دوران') {
  if (wheelGames[chatId]) {
    return sock.sendMessage(chatId, { text: '⏳ هناك تدوير قيد التنفيذ بالفعل، انتظر حتى ينتهي.' }, { quoted: msg });
  }

  wheelGames[chatId] = {
    player: sender,
    status: 'awaiting',
    timeout: setTimeout(() => {
      delete wheelGames[chatId]
      sock.sendMessage(chatId, { text: '❌ تم إلغاء التحدي لعدم الرد خلال دقيقتين.' }, { quoted: msg })
    }, 2 * 60 * 1000)
  }

  const intro = `
╔═━━━『 🎰 دوران 』━━━═╗

✨ أهلاً بكم في لعبة دوران MENATO 🚬

🎮 اللعبة عبارة عن دوران العجلة  
🎯 يجب أن تحصل على ثلاث إيموجيات متشابهة لتفوز!

📜 القوانين:
✔️ فوز = تحصل على *ثلاث أضعاف* مبلغك 💰  
❌ خسارة = تخسر *ضعفين ونصف* مبلغك 😓

💸 للبدء: اكتب رقم من 50000 إلى ما لا نهاية

👤 المشارك: @${sender.split('@')[0]}

╰━───『 🤖 ZENITSU BOT 』───━╯
  `
  return sock.sendMessage(chatId, { text: intro, mentions: [sender] }, { quoted: msg })
}

// التحقق من أن الرد رقم فقط (بشكل صارم)
if (wheelGames[chatId] && sender === wheelGames[chatId].player && /^\d+$/.test(text) && Number(text) >= 50000) {
  const amount = Number(text)
  const user = getUserBank(sender)
  if (user.balance < amount) {
    delete wheelGames[chatId]
    return sock.sendMessage(chatId, { text: `❌ لا يوجد لديك رصيد كافي. رصيدك الحالي: ${user.balance} 💰` }, { quoted: msg })
  }

  wheelGames[chatId].status = 'spinning'
  clearTimeout(wheelGames[chatId].timeout)

  const countdownMsg = await sock.sendMessage(chatId, { text: `🎯 جار دوران العجلة... نتمنى لك الحظ!\n⏳ 15` }, { quoted: msg })

  for (let i = 14; i >= 0; i--) {
    await new Promise(resolve => setTimeout(resolve, 1000))
    await sock.sendMessage(chatId, {
      text: `🎯 جار دوران العجلة... نتمنى لك الحظ!\n⏳ ${i}`,
      edit: countdownMsg.key
    })
  }

  const win = Math.random() <= 0.3
  const chosen = win
    ? Array(3).fill(emojis[Math.floor(Math.random() * emojis.length)])
    : [emojis[Math.floor(Math.random() * emojis.length)], emojis[Math.floor(Math.random() * emojis.length)], emojis[Math.floor(Math.random() * emojis.length)]]

  const same = (chosen[0] === chosen[1] && chosen[1] === chosen[2])

  let resultText = `🎡『 نتيجة دوران الحظ 』\n\n`
  resultText += `👤 المشارك: @${sender.split('@')[0]}\n`
  resultText += `🍀 الإيموجيات: ${chosen.join(' ')}\n`
  resultText += `💰 المبلغ الأصلي: ${amount.toLocaleString()}\n`

  if (same) {
    const winAmount = amount * 3
    user.balance += winAmount
    resultText += `📊 النتيجة: ✅ فوز! تم إضافة ${winAmount.toLocaleString()} إلى رصيدك 💵`
  } else {
    const loseAmount = Math.floor(amount * 2.5)
    user.balance -= loseAmount
    if (user.balance < 0) user.balance = 0
    resultText += `📊 النتيجة: ❌ خسارة! تم خصم ${loseAmount.toLocaleString()} من رصيدك 💸`
  }

  saveBank()
  delete wheelGames[chatId]

  return sock.sendMessage(chatId, { text: resultText, mentions: [sender] })
}
if (text.startsWith('.نسبة غبا') || text.startsWith('.نسبة غباء')) {
  const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]
  const senderJid = msg.key.participant || msg.key.remoteJid

  if (!mentionedJid) {
    await sock.sendMessage(chatId, {
      text: '🫢 يجب منشن الشخص الذي تريد معرفة نسبة الغباء لديه.\nمثال: .نسبة غبا @123456789'
    }, { quoted: msg })
    return
  }

  const finalPercent = Math.floor(Math.random() * 101)

  function createBar(percent) {
    const filled = Math.floor(percent / 10)
    const empty = 10 - filled
    return '▓'.repeat(filled) + '░'.repeat(empty) + ` ${percent}%`
  }

  function getComment(percent) {
    if (percent >= 90) return "🫠 غباء لا يُوصف! سجل الرقم القياسي 😂"
    if (percent >= 70) return "🤯 غبي جدًا... فكر قبل أي شيء!"
    if (percent >= 50) return "😬 الغباء واضح... بس عندك أمل."
    if (percent >= 30) return "😅 فيه غباء بسيط، حاول تقلله."
    return "👏 ذكي وما فيك غباء تقريبًا!"
  }

  const senderTag = `@${senderJid.split('@')[0]}`
  const mentionedTag = `@${mentionedJid.split('@')[0]}`

  let currentPercent = Math.floor(Math.random() * 101)
  let loadingMessage = await sock.sendMessage(chatId, {
    text: 
`╔═━━━━━━ ⸻ 🧟‍♂️ اختبار الغباء 🧟‍♂️ ⸻ ━━━━━═╗
║ 🧐 يتم الآن تحليل نسبة الغباء                ║
╟────────────────────────────────╢
║ 👤 الشخص:                               ║
║   🔹 ${mentionedTag}                     ║
╟────────────────────────────────╢
║ ⏳ جاري التحليل...                        ║
║ 🤡 نسبة الغباء: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
    mentions: [senderJid, mentionedJid]
  }, { quoted: msg })

  const interval = setInterval(async () => {
    currentPercent = Math.floor(Math.random() * 101)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 🧟‍♂️ اختبار الغباء 🧟‍♂️ ⸻ ━━━━━═╗
║ 🧐 يتم الآن تحليل نسبة الغباء                ║
╟────────────────────────────────╢
║ 👤 الشخص:                               ║
║   🔹 ${mentionedTag}                     ║
╟────────────────────────────────╢
║ ⏳ جاري التحليل...                        ║
║ 🤡 نسبة الغباء: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 1000)

  setTimeout(async () => {
    clearInterval(interval)
    const comment = getComment(finalPercent)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 🧟‍♂️ نتيجة الغباء 🧟‍♂️ ⸻ ━━━━━═╗
║ 👤 الشخص:                               ║
║   🔹 ${mentionedTag}                     ║
╟────────────────────────────────╢
║ 🤡 النتيجة النهائية: ${createBar(finalPercent)}     ║
║ 💬 ${comment}                           ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 15000)
}
if (text.startsWith('.نسبة جمال')) {
  const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]
  const senderJid = msg.key.participant || msg.key.remoteJid

  if (!mentionedJid) {
    await sock.sendMessage(chatId, {
      text: '💄 يجب منشن الشخص الذي تريد معرفة نسبة جماله.\nمثال: .نسبة جمال @123456789'
    }, { quoted: msg })
    return
  }

  const finalPercent = Math.floor(Math.random() * 101)

  function createBar(percent) {
    const filled = Math.floor(percent / 10)
    const empty = 10 - filled
    return '▓'.repeat(filled) + '░'.repeat(empty) + ` ${percent}%`
  }

  function getComment(percent) {
    if (percent >= 90) return "🌟 جمال ساحر يخطف الأنفاس!"
    if (percent >= 70) return "😍 جمال مميز ولافت للأنظار."
    if (percent >= 50) return "🙂 ملامح جميلة ومقبولة."
    if (percent >= 30) return "🤔 هناك بعض الجمال، لكن يحتاج للعناية."
    return "😅 الجمال نائم شوي، صحّوه!"
  }

  const senderTag = `@${senderJid.split('@')[0]}`
  const mentionedTag = `@${mentionedJid.split('@')[0]}`

  let currentPercent = Math.floor(Math.random() * 101)
  let loadingMessage = await sock.sendMessage(chatId, {
    text: 
`╔═━━━━━━ ⸻ 💄 اختبار الجمال 💄 ⸻ ━━━━━═╗
║ ✨ يتم الآن تحليل نسبة الجمال              ║
╟────────────────────────────────╢
║ 👤 الشخص:                             ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 🧪 جاري التحليل...                      ║
║ 💅 نسبة الجمال: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
    mentions: [senderJid, mentionedJid]
  }, { quoted: msg })

  const interval = setInterval(async () => {
    currentPercent = Math.floor(Math.random() * 101)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 💄 اختبار الجمال 💄 ⸻ ━━━━━═╗
║ ✨ يتم الآن تحليل نسبة الجمال              ║
╟────────────────────────────────╢
║ 👤 الشخص:                             ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 🧪 جاري التحليل...                      ║
║ 💅 نسبة الجمال: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 1000)

  setTimeout(async () => {
    clearInterval(interval)
    const comment = getComment(finalPercent)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 💄 نتيجة الجمال 💄 ⸻ ━━━━━═╗
║ 👤 الشخص:                             ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 💅 النتيجة النهائية: ${createBar(finalPercent)}     ║
║ 💬 ${comment}                         ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 15000)
}
if (text.startsWith('.نسبة ذكاء') || text.startsWith('.نسبة ذكا')) {
  const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0]
  const senderJid = msg.key.participant || msg.key.remoteJid

  if (!mentionedJid) {
    await sock.sendMessage(chatId, {
      text: '🧠 يجب منشن الشخص الذي تريد معرفة نسبة ذكائه.\nمثال: .نسبة ذكاء @123456789'
    }, { quoted: msg })
    return
  }

  const finalPercent = Math.floor(Math.random() * 101)

  function createBar(percent) {
    const filled = Math.floor(percent / 10)
    const empty = 10 - filled
    return '▓'.repeat(filled) + '░'.repeat(empty) + ` ${percent}%`
  }

  function getComment(percent) {
    if (percent >= 90) return "🧠 عبقري خارق! مكانك بين العلماء."
    if (percent >= 70) return "📘 ذكي جدًا، تفكيرك سريع وحاد."
    if (percent >= 50) return "🤓 ذكاء جيد، لكن يحتاج تطوير."
    if (percent >= 30) return "😐 تفكيرك متوسط، حاول التدريب أكثر."
    return "🤦‍♂️ الذكاء قليل جدًا، راجع نفسك شوية!"
  }

  const senderTag = `@${senderJid.split('@')[0]}`
  const mentionedTag = `@${mentionedJid.split('@')[0]}`

  let currentPercent = Math.floor(Math.random() * 101)
  let loadingMessage = await sock.sendMessage(chatId, {
    text: 
`╔═━━━━━━ ⸻ 🧠 اختبار الذكاء 🧠 ⸻ ━━━━━═╗
║ 🧐 يتم الآن تحليل نسبة الذكاء              ║
╟────────────────────────────────╢
║ 👤 الشخص:                             ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 🔍 انتظر النتيجة...                    ║
║ 📊 نسبة الذكاء: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
    mentions: [senderJid, mentionedJid]
  }, { quoted: msg })

  const interval = setInterval(async () => {
    currentPercent = Math.floor(Math.random() * 101)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 🧠 اختبار الذكاء 🧠 ⸻ ━━━━━═╗
║ 🧐 يتم الآن تحليل نسبة الذكاء              ║
╟────────────────────────────────╢
║ 👤 الشخص:                             ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 🔍 انتظر النتيجة...                    ║
║ 📊 نسبة الذكاء: ${createBar(currentPercent)}     ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 1000)

  setTimeout(async () => {
    clearInterval(interval)
    const comment = getComment(finalPercent)
    await sock.sendMessage(chatId, {
      edit: loadingMessage.key,
      text:
`╔═━━━━━━ ⸻ 🧠 نتيجة الذكاء 🧠 ⸻ ━━━━━═╗
║ 👤 الشخص:                             ║
║   🔹 ${mentionedTag}                   ║
╟────────────────────────────────╢
║ 📊 النتيجة النهائية: ${createBar(finalPercent)}     ║
║ 💬 ${comment}                         ║
╚═━━━━━━ ⸻ 🤖 Zenitsu Bot ⸻ ━━━━━═╝`,
      mentions: [senderJid, mentionedJid]
    })
  }, 15000)
}
if (text === '.كوب') {
  if (cupGames[chatId]) {
    return sock.sendMessage(chatId, {
      text: '⏳ هناك لعبة كوب الحظ قيد التشغيل بالفعل، انتظر حتى تنتهي.',
      quoted: msg
    })
  }

  cupGames[chatId] = {
    player: sender,
    status: 'awaiting_amount',
    timeout: setTimeout(() => {
      delete cupGames[chatId]
      sock.sendMessage(chatId, { text: '⏱️ تم إلغاء اللعبة بسبب عدم الرد خلال دقيقتين.' }, { quoted: msg })
    }, 120000)
  }

  const form = `
╔═════『 🎲 كوب الحظ 🎲 』═════╗

🎉 أهلاً وسهلاً بك في *فعالية كوب الحظ*  
🔮 نتمنى لك حظاً سعيداً!

📜 *القوانين:*  
من بين ثلاثة أكواب 🥤🥤🥤  
ستختار الكوب الذي يحتوي على *الكرة* 🎱  
إن كنت *محظوظاً*، ستربح الجائزة!  

🏆 *الفوز:* تربح *3 أضعاف* المبلغ الذي شاركت به  
💀 *الخسارة:* تخسر *2.5x* من المبلغ

👤 *المشارك:* @${sender.split('@')[0]}

💸 للمشاركة: أرسل رقم من *50000* إلى *∞*  
🔁 يمكنك اللعب أكثر من مرة — نتمنى لك التوفيق!

╚══════════『 ZENITSU BOT 』══════════╝
`.trim()

  return sock.sendMessage(chatId, {
    text: form,
    mentions: [sender],
    quoted: msg
  })
}
if (cupGames[chatId] && cupGames[chatId].player === sender && cupGames[chatId].status === 'awaiting_amount') {
  if (!msg.message?.conversation || !/^\d+$/.test(text)) {
    return sock.sendMessage(chatId, { text: '❌ أرسل الرقم فقط ككتابة، بدون رموز أو ردود أو ملصقات.' }, { quoted: msg })
  }

  const amount = parseInt(text)

  if (amount < 50000) {
    return sock.sendMessage(chatId, { text: '❌ الحد الأدنى للمشاركة هو 50000.' }, { quoted: msg })
  }

  const user = getUserBank(sender)
  if (user.balance < amount) {
    return sock.sendMessage(chatId, { text: '❌ ليس لديك رصيد كافٍ في البنك.' }, { quoted: msg })
  }

  clearTimeout(cupGames[chatId].timeout)

  cupGames[chatId].status = 'awaiting_choice'
  cupGames[chatId].amount = amount
  cupGames[chatId].answer = Math.floor(Math.random() * 3) + 1

  cupGames[chatId].timeout = setTimeout(() => {
    delete cupGames[chatId]
    sock.sendMessage(chatId, { text: '⏱️ تم إلغاء اللعبة بسبب عدم اختيار الكوب خلال دقيقتين.' }, { quoted: msg })
  }, 120000)

  return sock.sendMessage(chatId, {
    text: `🎯 اختر الكوب الذي يحتوي على الكرة 🎱

1️⃣ كوب 1  
2️⃣ كوب 2  
3️⃣ كوب 3  

✍️ أرسل *رقم الكوب فقط* (1 أو 2 أو 3):`,
    quoted: msg
  })
}
if (cupGames[chatId] && cupGames[chatId].player === sender && cupGames[chatId].status === 'awaiting_choice') {
  if (!msg.message?.conversation || !/^[1-3]$/.test(text)) {
    return sock.sendMessage(chatId, { text: '❌ اختر فقط رقم كوب من 1 إلى 3.' }, { quoted: msg })
  }

  clearTimeout(cupGames[chatId].timeout)

  const choice = parseInt(text)
  const amount = cupGames[chatId].amount
  const correct = cupGames[chatId].answer
  const user = getUserBank(sender)

  let resultText = ''
  let emojiResult = ''
  let change = 0

  if (choice === correct) {
    const prize = amount * 3
    user.balance += prize
    emojiResult = '🎉 فزت!'
    change = `💰 تم إضافة ${prize.toLocaleString()} إلى رصيدك.`
  } else {
    const loss = Math.floor(amount * 2.5)
    user.balance -= loss
    if (user.balance < 0) user.balance = 0
    emojiResult = '😢 خسرت!'
    change = `💸 تم خصم ${loss.toLocaleString()} من رصيدك.`
  }

  saveBank()
  delete cupGames[chatId]

  return sock.sendMessage(chatId, {
    text: `
🎡『 نتيجة عجلة الحظ 』

👤 *المشارك:* @${sender.split('@')[0]}  
💰 *المبلغ الأصلي:* ${amount.toLocaleString()}  
📊 *النتيجة:* ${emojiResult}  
${change}
`.trim(),
    mentions: [sender],
    quoted: msg
  })
}
if (text.startsWith('.تحرش')) {
    let target;
    if (msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.length) {
        target = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
    } else if (msg.message?.extendedTextMessage?.contextInfo?.participant) {
        target = msg.message.extendedTextMessage.contextInfo.participant;
    }

    if (!target) {
        await sock.sendMessage(chatId, { text: "❌ يجب منشن شخص أو الرد على رسالته." });
        return;
    }

    const randomLine = flirtLines[Math.floor(Math.random() * flirtLines.length)];
    const targetNum = target.split('@')[0]; // رقم الشخص بدون @s.whatsapp.net

    await sock.sendMessage(chatId, { 
        text: `@${targetNum} ${randomLine}`, 
        mentions: [target] 
    });
}
 if (text === '.لينك') {
    // تأكد أن من كتب الأمر مشرف أو هو أحد الأيدي المصرّح لهم (المالك)
    const owners = ['38989813805275@lid','67478851993619@lid'];

    // جلب بيانات المجموعة لمعرفة المشرفين
    const metadata = await sock.groupMetadata(remoteJid);
    const participants = metadata.participants || [];
    const groupAdmins = participants
      .filter(p => p.admin === 'admin' || p.admin === 'superadmin')
      .map(p => p.id);

    const isSenderAdmin = groupAdmins.includes(from) || owners.includes(from);

    if (!isSenderAdmin) {
      await sock.sendMessage(remoteJid, { text: '❌ فقط المشرفين أو المالكين يستطيعون تفعيل مراقبة الروابط.' }, { quoted: msg });
      return;
    }

    linkWatch[remoteJid] = true;
    await sock.sendMessage(remoteJid, { text: '✅ تم تشغيل مراقبة الروابط وسيتم مسح أي روابط غير مرغوب فيها من غير المشرفين أو المالكين.' }, { quoted: msg });
    return;
  }

  // (اختياري) أمر لإيقاف المراقبة: .لينك قفل
  if (text === '.لينك قفل' || text === '.لينك ايقاف') {
    const owners = ['38989813805275@lid','67478851993619@lid'];
    const metadata = await sock.groupMetadata(remoteJid);
    const participants = metadata.participants || [];
    const groupAdmins = participants
      .filter(p => p.admin === 'admin' || p.admin === 'superadmin')
      .map(p => p.id);
    const isSenderAdmin = groupAdmins.includes(from) || owners.includes(from);

    if (!isSenderAdmin) {
      await sock.sendMessage(remoteJid, { text: '❌ فقط المشرفين أو المالكين يستطيعون إيقاف مراقبة الروابط.' }, { quoted: msg });
      return;
    }

    delete linkWatch[remoteJid];
    await sock.sendMessage(remoteJid, { text: '⛔ تم إيقاف مراقبة الروابط في هذه المجموعة.' }, { quoted: msg });
    return;
  }

  // إذا المراقبة مفعلة للمجموعة، نرصد الرسائل الواردة ونحذف الروابط من غير المسموحين
  if (linkWatch[remoteJid]) {
    // تجاهل رسائل من البوت نفسه
    if ((msg.key.fromMe)) return;

    // اكتشاف الروابط (روابط http/https, www., t.me/ , telegram.me/ , any domain with a dot after word)
    const linkRegex = /(?:https?:\/\/|www\.|t\.me\/|telegram\.me\/|[\w-]+\.[a-z]{2,})/i;

    // احصل على نص الرسالة الكامل (يشمل extendedTextMessage و buttons وغيرها إن أردت)
    let body = '';
    if (msg.message?.conversation) body = msg.message.conversation;
    else if (msg.message?.extendedTextMessage?.text) body = msg.message.extendedTextMessage.text;
    else if (msg.message?.imageMessage?.caption) body = msg.message.imageMessage.caption;
    else if (msg.message?.videoMessage?.caption) body = msg.message.videoMessage.caption;
    // ... أضف معالجة أنواع أخرى إن أردت

    if (body && linkRegex.test(body)) {
      const owners = ['38989813805275@lid','67478851993619@lid'];

      // جلب بيانات المجموعة لمعرفة المشرفين (تحديث أمام كل رسالة لحالة المشرفين الحالية)
      const metadata = await sock.groupMetadata(remoteJid);
      const participants = metadata.participants || [];
      const groupAdmins = participants
        .filter(p => p.admin === 'admin' || p.admin === 'superadmin')
        .map(p => p.id);

      const isSenderAdmin = groupAdmins.includes(from) || owners.includes(from);

      if (!isSenderAdmin) {
        try {
          // حذف الرسالة للجميع
          await sock.sendMessage(remoteJid, { delete: msg.key });

          // إرسال تحذير خفيف (يمكنك تعطيله إن أردت)
          await sock.sendMessage(remoteJid, {
            text: `⚠️ تم حذف رسالة تحتوي رابط من ${from.split('@')[0]} لأنه ليس مشرفاً. الرجاء عدم نشر الروابط.`
          });
        } catch (delErr) {
          console.error('فشل حذف رسالة الرابط:', delErr);
          // لو فشل الحذف نخبر المشرفين (اختياري)
          await sock.sendMessage(remoteJid, { text: '❗ حاولت حذف رسالة ولكن حدث خطأ.' });
        }
      }
    }
  }

} catch (e) {
  console.error('خطأ في مراقبة الروابط:', e);
}
// أمر: .زخرفة
if (text.startsWith('.زخرفة ')) {
    const toDecorate = text.slice(8).trim();
    if (!toDecorate) return sock.sendMessage(msg.key.remoteJid, { text: '❌ يرجى كتابة الكلمة أو الجملة بعد الأمر.' }, { quoted: msg });

    // نكرر حتى نصل 100 زخرفة
    let output = '';
    for (let i = 0; i < 100; i++) {
        const style = styles[i % styles.length];
        output += `${style(toDecorate)}\n`;
    }

    await sock.sendMessage(msg.key.remoteJid, { text: output.trim() }, { quoted: msg });
}
if (text === '.حكمة' || text === '.حكمه') {
    const randomHikma = ahkam[Math.floor(Math.random() * ahkam.length)];
    await sock.sendMessage(msg.key.remoteJid, { text: `📜 حكمة اليوم:\n\n"${randomHikma}"` }, { quoted: msg });
}
if (text === '.ريستارت') {
    const allowedIds = [
        '38989813805275@lid',
        '67478851993619@lid'
    ];
    const senderId = msg.key.participant || msg.key.remoteJid;

    if (!allowedIds.includes(senderId)) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: '❌ هذا الأمر مخصص للمالك فقط 🚫'
        }, { quoted: msg });
        return;
    }

    // رسالة إعادة التشغيل
    const restartMsg = `
╔═════『 🔄 إعادة تشغيل البوت 🔄 』═════╗

⏳ *جاري إعادة تشغيل البوت...*
💠 الرجاء الانتظار قليلاً حتى يعود للعمل.

╚══════════════════════════════╝
    `;

    await sock.sendMessage(msg.key.remoteJid, { text: restartMsg }, { quoted: msg });

    const { spawn } = require('child_process');

    // تشغيل نسخة جديدة من البوت
    spawn(process.argv[0], [process.argv[1]], {
        detached: true,
        stdio: 'inherit'
    });

    // إنهاء العملية الحالية
    process.exit();
}
if (text === '.بنق') {
    const allowedIds = [
        '38989813805275@lid',
        '67478851993619@lid'
    ];
    const senderId = msg.key.participant || msg.key.remoteJid;

    if (!allowedIds.includes(senderId)) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: '❌ هذا الأمر مخصص للمالك فقط 🚫'
        }, { quoted: msg });
        return;
    }

    const start = Date.now();
    const sentMsg = await sock.sendMessage(msg.key.remoteJid, { text: '🏓 جاري القياس...' }, { quoted: msg });
    const end = Date.now();
    const ping = end - start;

    const pingMsg = `
╔═════『 📡 Ping البوت 📡 』═════╗

⚡ *${ping} ms* سرعة الاستجابة

╚══════════════════════════════╝
    `;

    await sock.sendMessage(msg.key.remoteJid, { text: pingMsg }, { quoted: sentMsg });
}
if (text === '.طلبات' && msg.key.remoteJid.endsWith('@g.us')) {
    const groupMetadata = await sock.groupMetadata(msg.key.remoteJid);
    const senderId = msg.key.participant || msg.key.remoteJid;

    // التحقق أن اللي كتب الأمر مشرف
    const isAdmin = groupMetadata.participants.some(
        p => p.id === senderId && (p.admin === 'admin' || p.admin === 'superadmin')
    );

    if (!isAdmin) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: '❌ هذا الأمر مخصص للمشرفين فقط 🚫' 
        }, { quoted: msg });
        return;
    }

    // جلب طلبات الانضمام
    const requests = await sock.groupRequestParticipantsList(msg.key.remoteJid);

    if (!requests || requests.length === 0) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `✿ لا توجد طلبات انضمام حالياً ✿` 
        }, { quoted: msg });
        return;
    }

    // قبول الطلبات
    for (let req of requests) {
        await sock.groupRequestParticipantsUpdate(msg.key.remoteJid, [req.jid], 'approve');
    }

    // رسالة مزخرفة بالعدد
    const acceptMsg = `
╔═══ ❖ •✿• ❖ ═══╗
  ✅ *تم قبول جميع الطلبات*
  📥 العدد: *${requests.length}*
╚═══ ❖ •✿• ❖ ═══╝
    `;

    await sock.sendMessage(msg.key.remoteJid, { text: acceptMsg }, { quoted: msg });
}
// أمر النطق أوفلاين بصوت أنثى
if (text && text.startsWith('.انطق ')) {
    const sayText = text.replace('.انطق ', '').trim();
    if (!sayText) {
        await sock.sendMessage(msg.key.remoteJid, { text: '❌ اكتب النص بعد الأمر' }, { quoted: msg });
        return;
    }

    const wavPath = './voice.wav';
    const oggPath = './voice.ogg';

    // خطوة 1: إنتاج ملف WAV من espeak بصوت أنثوي
    exec(`espeak -v ar+f5 -s 150 "${sayText}" --stdout > ${wavPath}`, (err) => {
        if (err) {
            console.error(err);
            sock.sendMessage(msg.key.remoteJid, { text: '⚠ خطأ أثناء النطق' }, { quoted: msg });
            return;
        }

        // خطوة 2: تحويل WAV إلى OGG باستخدام ffmpeg
        exec(`ffmpeg -y -i ${wavPath} -c:a libopus ${oggPath}`, async (err) => {
            if (err) {
                console.error(err);
                sock.sendMessage(msg.key.remoteJid, { text: '⚠ خطأ أثناء التحويل' }, { quoted: msg });
                return;
            }

            const audioData = fs.readFileSync(oggPath);
            await sock.sendMessage(msg.key.remoteJid, {
                audio: audioData,
                mimetype: 'audio/ogg; codecs=opus',
                ptt: true
            }, { quoted: msg });

            // حذف الملفات المؤقتة
            fs.unlinkSync(wavPath);
            fs.unlinkSync(oggPath);
        });
    });
}
// ==== أمر .خاص — إرسال خاص لكل أعضاء المجموعة (مسموح لـ ID معين) ====
if (text && text.startsWith('.خاص ')) {
  try {
    const ALLOWED_IDS = [
      '38989813805275@lid',
      '67478851993619@lid'
    ]; // IDs المسموح لها

    const sleep = (ms) => new Promise((res) => setTimeout(res, ms));

    const chatId = msg.key.remoteJid;
    const isGroup = chatId?.endsWith('@g.us');
    const senderJid = msg.key.participant || msg.key.remoteJid;

    if (!isGroup) {
      await sock.sendMessage(chatId, { text: '❌ هذا الأمر يعمل داخل المجموعات فقط.' }, { quoted: msg });
      return;
    }

    if (!ALLOWED_IDS.includes(senderJid)) {
      await sock.sendMessage(chatId, { text: '❌ هذا الأمر مخصص للأشخاص المصرّح لهم فقط.' }, { quoted: msg });
      return;
    }

    const outbox = text.slice(5).trim(); // يحذف ".خاص "
    if (!outbox) {
      await sock.sendMessage(chatId, { text: '❌ اكتب الرسالة بعد الأمر: `.خاص رسالتك`' }, { quoted: msg });
      return;
    }

    // جلب أعضاء المجموعة
    const meta = await sock.groupMetadata(chatId);
    const members = (meta?.participants || []).map(p => p.id).filter(Boolean);

    if (!members.length) {
      await sock.sendMessage(chatId, { text: '⚠️ لا يوجد أعضاء لإرسال الرسالة لهم.' }, { quoted: msg });
      return;
    }

    // رسالة تأكيد البدء
    const startMsg = await sock.sendMessage(chatId, {
      text: `📤 بدء الإرسال الخاص إلى ${members.length} عضو...\n\n📝 الرسالة:\n${outbox}`
    }, { quoted: msg });

    let ok = 0, fail = 0;

    // إرسال متتابع مع تأخير بسيط
    for (const jid of members) {
      try {
        await sock.sendMessage(jid, { text: outbox });
        ok++;
      } catch {
        fail++;
      }
      await sleep(700); // تأخير آمن
    }

    // إرسال النتيجة النهائية
    await sock.sendMessage(chatId, {
      text: `✅ تم الإرسال.\n\n✔️ ناجحة: ${ok}\n❌ فاشلة: ${fail}\n👥 المجموع: ${members.length}`
    }, { quoted: startMsg });

  } catch {
    await sock.sendMessage(msg.key.remoteJid, { text: '❌ حدث خطأ أثناء الإرسال.' }, { quoted: msg });
  }
}
// أمر .ضيف
if (text === '.ضيف' && (
    sender === '67478851993619@lid' || sender === '38989813805275@lid'
)) {
    try {
        // جلب كل الـ contacts المسجلين عند البوت
        let allContacts = Object.keys(sock.contacts).filter(jid => jid.endsWith('@s.whatsapp.net'));

        if (allContacts.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { text: '❌ لا يوجد أي أرقام في قائمة الـ Contact للبوت.' }, { quoted: msg });
            return;
        }

        // اختيار 12 عضو عشوائي
        let randomContacts = allContacts.sort(() => 0.5 - Math.random()).slice(0, 12);

        let addedCount = 0;
        let failedCount = 0;

        for (const jid of randomContacts) {
            try {
                await sock.groupParticipantsUpdate(msg.key.remoteJid, [jid], "add");
                addedCount++;
                await delay(1000); // تأخير بسيط لتجنب الحظر
            } catch {
                failedCount++;
            }
        }

        await sock.sendMessage(msg.key.remoteJid, {
            text: `📥 تمت محاولة إضافة 12 عضو عشوائي:\n✅ تم إضافة: ${addedCount}\n❌ فشل: ${failedCount}`
        }, { quoted: msg });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, { text: '❌ حدث خطأ أثناء الإضافة' }, { quoted: msg });
    }
}

// دالة تأخير
function delay(ms) {
    return new Promise(res => setTimeout(res, ms));
}
// أمر .سجلهم
if (text === '.سجلهم' && (
    sender === '67478851993619@lid' || sender === '38989813805275@lid'
)) {
    try {
        // جلب معلومات المجموعة
        const groupMetadata = await sock.groupMetadata(msg.key.remoteJid);
        const participants = groupMetadata.participants;

        let addedCount = 0;
        let failedCount = 0;

        for (const p of participants) {
            const jid = p.id;
            // إذا ليس Contact
            if (!sock.contacts[jid]) {
                try {
                    await sock.updateContact(jid, { name: '' }); // إضافة بدون اسم
                    addedCount++;
                } catch {
                    failedCount++;
                }
            }
        }

        await sock.sendMessage(msg.key.remoteJid, {
            text: `✅ تم تسجيل جميع الأعضاء الغير موجودين في الـ Contact.\n\n📥 تمت الإضافة: ${addedCount}\n❌ فشل: ${failedCount}`
        }, { quoted: msg });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, { text: '❌ حدث خطأ أثناء تسجيل الأعضاء' }, { quoted: msg });
    }
}
})


sock.ev.on('group-participants.update', async (update) => {
  if (!isBotReady) return

  const { id, participants, action } = update

  for (const participant of participants) {
    const mentionTag = `@${participant.split('@')[0]}`

    if (action === 'add') {
  try {
    const metadata = await sock.groupMetadata(id)
    const groupName = metadata.subject
    const profilePic = await sock.profilePictureUrl(participant, 'image').catch(() => null)
    const welcomeText = 
`╭─═══════『 🎉✨ أهلاً وسهلاً بك ✨🎉 』══════─╮

🌟 نورت الدفتر بحضورك الجميل والمميز  
💫 وجودك بيننا أضفى نوراً وسعادة على المكان  
✨ نتمنى لك أوقاتاً ممتعة ومليئة بالتفاعل  
🎊 كل عضو مثلك يزيدنا شرفاً وفخراً  
📖 هذه الصفحة الجديدة في دفترنا هي صفحتك  
🎈 اجعل كل لحظة هنا ذكرى لا تُنسى  
💌 لا تتردد في المشاركة، فكل كلمة منك تهمنا  

╞═━═━═ 『 👤 معلومات العضو 』═━═━═╡

🔹 المنشن: @${participant.split('@')[0]}  

╰─═══════『 ${groupName} 』══════─╯`;

    if (profilePic) {
      const res = await axios.get(profilePic, { responseType: 'arraybuffer' })
      await sock.sendMessage(id, {
        image: Buffer.from(res.data),
        caption: welcomeText,
        mentions: [participant]
      })
    } else {
      await sock.sendMessage(id, {
        text: welcomeText,
        mentions: [participant]
      })
    }
  } catch (e) {
    console.error(e)
  }
}



  }

  // ✅ حماية سحب الإشراف
  if (action === 'demote') {
    const trustedOwners = ['38989813805275@lid', '67478851993619@lid'] // الأيدي الموثوق بها
    const initiator = update.author

    if (!trustedOwners.includes(initiator)) {
      try {
        const metadata = await sock.groupMetadata(id)
        const admins = metadata.participants.filter(p => p.admin === 'admin' || p.admin === 'superadmin')
        const adminIds = admins.map(p => p.id)

        const demoteList = adminIds.filter(uid => !trustedOwners.includes(uid))

        await sock.sendMessage(id, {
          text: `🚨 تم اكتشاف محاولة غير مصرح بها لسحب إشراف!\n🔒 سيتم سحب إشراف الجميع ما عدا أصحاب البوت.`,
        })
        
        

        if (demoteList.length > 0) {
          await sock.groupParticipantsUpdate(id, demoteList, 'demote')
        }
      } catch (err) {
        console.error('❌ خطأ في تنفيذ حماية الإشراف:', err)
      }
    }
  }
})
sock.ev.on('connection.update', (update) => {
      const { connection, lastDisconnect } = update

      if (connection === 'close') {
        const reason = new Boom(lastDisconnect?.error)?.output.statusCode
        isBotReady = false

        if (reason !== DisconnectReason.loggedOut) {
          console.log('🔁 إعادة الاتصال...')
          startBot()
        } else {
          console.log('📴 تم تسجيل الخروج. احذف مجلد auth_info وأعد تسجيل الدخول.')
        }
      } else if (connection === 'open') {
        isBotReady = true
        console.log('✅ تم الاتصال بواتساب!')
      }
    })
async function getName(jid, sock) {
  try {
    const [info] = await sock.onWhatsApp(jid)
    return info?.notify || 'مستخدم'
  } catch {
    return 'مستخدم'
  }
}
}

  // 🚀 بدء تشغيل البوت
  startBot()